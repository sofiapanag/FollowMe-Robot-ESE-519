
Follow_Me.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000540  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800100  00800100  000005b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e3  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000740  00000000  00000000  00001097  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000694  00000000  00000000  000017d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000486  00000000  00000000  00001fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027f  00000000  00000000  0000246a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000026e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_10>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 31       	cpi	r26, 0x14	; 20
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
  88:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <UART_initialize>:
    TCCR0A &= ~(1 << COM0B0);
    TCCR0A |= (1 << COM0B1);
    OCR0B = 0;
    sei();

    cli();
  90:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  94:	87 e6       	ldi	r24, 0x67	; 103
  96:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  a0:	e2 ec       	ldi	r30, 0xC2	; 194
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 83       	st	Z, r24
  a8:	80 81       	ld	r24, Z
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	80 83       	st	Z, r24
  ae:	08 95       	ret

000000b0 <intialize_Timer1_PWM>:

/************************************************************************/
/* initialization of Timer 1 PWM										*/
/************************************************************************/
void intialize_Timer1_PWM() {
    cli();
  b0:	f8 94       	cli
    //INPUT OF ARDUINO: ULTRASONIC
    DDRD |= (1 << DDD7);    // set pin D7 as output
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	8a b9       	out	0x0a, r24	; 10
    DDRB &= ~(1 << DDB0);   // set pin B0 as input (input capture timer 1)
  b8:	84 b1       	in	r24, 0x04	; 4
  ba:	8e 7f       	andi	r24, 0xFE	; 254
  bc:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1 << PORTB0); // enable internal pull up resistor
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	85 b9       	out	0x05, r24	; 5

    // initialize ultrasonic timer 1
    TCCR1B &= ~(1 << CS10); // set timer prescaler to 8
  c4:	e1 e8       	ldi	r30, 0x81	; 129
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	80 83       	st	Z, r24
    TCCR1B |= (1 << CS11);
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
    TCCR1B &= ~(1 << CS12);
  d4:	80 81       	ld	r24, Z
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	80 83       	st	Z, r24

    // input capture configurations
    TIMSK1 |= (1 << ICIE1); // enable input capture interrupt
  da:	af e6       	ldi	r26, 0x6F	; 111
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	8c 91       	ld	r24, X
  e0:	80 62       	ori	r24, 0x20	; 32
  e2:	8c 93       	st	X, r24
    TCCR1B |= (1 << ICES1); // detecting rising edge
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
    TIFR1 |= (1 << ICF1);   // clear input capture flag
  ea:	86 b3       	in	r24, 0x16	; 22
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	86 bb       	out	0x16, r24	; 22
    TIFR1 |= (1 << TOV1);  // overflow flag
  f0:	86 b3       	in	r24, 0x16	; 22
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	86 bb       	out	0x16, r24	; 22

    sei();
  f6:	78 94       	sei
  f8:	08 95       	ret

000000fa <intialize_Timer2_PWM>:

/************************************************************************/
/* initialize Timer 2 PWM                                                */
/************************************************************************/
void intialize_Timer2_PWM() {
  cli();               // disable global interrupts
  fa:	f8 94       	cli
    //OUTPUT OF ARDUINO: MOTORS
  DDRD |= (1 << DDD3); // set pin D3 as output (OC2B) RIGHT
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	8a b9       	out	0x0a, r24	; 10
  DDRB |= (1 << DDB3); // set pin D3 as output (OC2A) LEFT
 102:	84 b1       	in	r24, 0x04	; 4
 104:	88 60       	ori	r24, 0x08	; 8
 106:	84 b9       	out	0x04, r24	; 4

  // set timer prescaler to 1024
  TCCR2B |= (1 << CS20);
 108:	a1 eb       	ldi	r26, 0xB1	; 177
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	8c 91       	ld	r24, X
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	8c 93       	st	X, r24
  TCCR2B |= (1 << CS21);
 112:	8c 91       	ld	r24, X
 114:	82 60       	ori	r24, 0x02	; 2
 116:	8c 93       	st	X, r24
  TCCR2B |= (1 << CS22);
 118:	8c 91       	ld	r24, X
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	8c 93       	st	X, r24

  // set phase correct counting up to TOP
  TCCR2A |= (1 << WGM20);
 11e:	e0 eb       	ldi	r30, 0xB0	; 176
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	81 60       	ori	r24, 0x01	; 1
 126:	80 83       	st	Z, r24
  TCCR2A &= ~(1 << WGM21);
 128:	80 81       	ld	r24, Z
 12a:	8d 7f       	andi	r24, 0xFD	; 253
 12c:	80 83       	st	Z, r24
  TCCR2B &= ~(1 << WGM22);
 12e:	8c 91       	ld	r24, X
 130:	87 7f       	andi	r24, 0xF7	; 247
 132:	8c 93       	st	X, r24

  // clear OC2B on compare match, set OC2B at Bottom
  TCCR2A &= ~(1 << COM2B0);
 134:	80 81       	ld	r24, Z
 136:	8f 7e       	andi	r24, 0xEF	; 239
 138:	80 83       	st	Z, r24
  TCCR2A |= (1 << COM2B1);
 13a:	80 81       	ld	r24, Z
 13c:	80 62       	ori	r24, 0x20	; 32
 13e:	80 83       	st	Z, r24

  // clear OC2A on compare match, set OC2A at Bottom
  TCCR2A &= ~(1 << COM2A0);
 140:	80 81       	ld	r24, Z
 142:	8f 7b       	andi	r24, 0xBF	; 191
 144:	80 83       	st	Z, r24
  TCCR2A |= (1 << COM2A1);
 146:	80 81       	ld	r24, Z
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	80 83       	st	Z, r24

  OCR2A = 0;  // duty cycle of left wheels (speed)
 14c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
  OCR2B = 0; // duty cycle of right wheels (speed)
 150:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  sei(); // enable global interrupts
 154:	78 94       	sei
 156:	08 95       	ret

00000158 <initialize>:
/************************************************************************/
/*   //INPUT OF ARDUINO: ULTRASONIC										*/                                                                    
/************************************************************************/

void initialize() {
  cli(); // disable global interrupts
 158:	f8 94       	cli

  DDRD &= ~(1 << DDD6);    // set pin D6 as input (Start/Stop)
 15a:	8a b1       	in	r24, 0x0a	; 10
 15c:	8f 7b       	andi	r24, 0xBF	; 191
 15e:	8a b9       	out	0x0a, r24	; 10

  // IR Sensors
  DDRB &= ~(1 << DDB4);    // set pin B4 as input (left IR sensor)
 160:	84 b1       	in	r24, 0x04	; 4
 162:	8f 7e       	andi	r24, 0xEF	; 239
 164:	84 b9       	out	0x04, r24	; 4
  DDRB &= ~(1 << DDB5);    // set pin B5 as input (right IR sensor)
 166:	84 b1       	in	r24, 0x04	; 4
 168:	8f 7d       	andi	r24, 0xDF	; 223
 16a:	84 b9       	out	0x04, r24	; 4

  // motors direction
  DDRD |= (1 << DDD2);    // set pin D2 as output (right)
 16c:	8a b1       	in	r24, 0x0a	; 10
 16e:	84 60       	ori	r24, 0x04	; 4
 170:	8a b9       	out	0x0a, r24	; 10
  DDRD |= (1 << DDD4);    // set pin D4 as output (left)
 172:	8a b1       	in	r24, 0x0a	; 10
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8a b9       	out	0x0a, r24	; 10
 
  sei(); // enable global interrupts
 178:	78 94       	sei
 17a:	08 95       	ret

0000017c <__vector_10>:
/************************************************************************/
/* Ultrasonic ISR.														*/
/* TODO: see how to modify overflow variable 									*/
/************************************************************************/

ISR(TIMER1_CAPT_vect) { // ultrasonic
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	5f 93       	push	r21
 18e:	6f 93       	push	r22
 190:	7f 93       	push	r23
 192:	8f 93       	push	r24
 194:	9f 93       	push	r25
 196:	af 93       	push	r26
 198:	bf 93       	push	r27
 19a:	ef 93       	push	r30
 19c:	ff 93       	push	r31
  
  if ((TCCR1B & (1 << ICES1))) { // rising edge -- setup dot and dash
 19e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1a2:	86 ff       	sbrs	r24, 6
 1a4:	0d c0       	rjmp	.+26     	; 0x1c0 <__vector_10+0x44>
	  overflow = 0;
 1a6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1aa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 1b2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	  TIMSK1 |= (1 << TOIE1); // overflow interrupt is -- TOV1 flag
 1b6:	ef e6       	ldi	r30, 0x6F	; 111
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	80 83       	st	Z, r24
  }
  
  TIFR1 |= (1 << ICF1); // clear input capture flag
 1c0:	86 b3       	in	r24, 0x16	; 22
 1c2:	80 62       	ori	r24, 0x20	; 32
 1c4:	86 bb       	out	0x16, r24	; 22
  current = ICR1;
 1c6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1ca:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1ce:	a0 e0       	ldi	r26, 0x00	; 0
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <current>
 1d6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <current+0x1>
 1da:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <current+0x2>
 1de:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <current+0x3>
  
  if (!(TCCR1B & (1 << ICES1))) { // if detecting falling edge
 1e2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1e6:	86 fd       	sbrc	r24, 6
 1e8:	79 c0       	rjmp	.+242    	; 0x2dc <__vector_10+0x160>
    if (current > previous) {
 1ea:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <current>
 1ee:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <current+0x1>
 1f2:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <current+0x2>
 1f6:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <current+0x3>
 1fa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <previous>
 1fe:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <previous+0x1>
 202:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <previous+0x2>
 206:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <previous+0x3>
 20a:	84 17       	cp	r24, r20
 20c:	95 07       	cpc	r25, r21
 20e:	a6 07       	cpc	r26, r22
 210:	b7 07       	cpc	r27, r23
 212:	e0 f4       	brcc	.+56     	; 0x24c <__vector_10+0xd0>
      duration = current - previous;
 214:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current>
 218:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <current+0x1>
 21c:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <current+0x2>
 220:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <current+0x3>
 224:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <previous>
 228:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <previous+0x1>
 22c:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <previous+0x2>
 230:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <previous+0x3>
 234:	84 1b       	sub	r24, r20
 236:	95 0b       	sbc	r25, r21
 238:	a6 0b       	sbc	r26, r22
 23a:	b7 0b       	sbc	r27, r23
 23c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <duration>
 240:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <duration+0x1>
 244:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <duration+0x2>
 248:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <duration+0x3>
    } 
	if (current < previous) {
 24c:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <current>
 250:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <current+0x1>
 254:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <current+0x2>
 258:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <current+0x3>
 25c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <previous>
 260:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <previous+0x1>
 264:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <previous+0x2>
 268:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <previous+0x3>
 26c:	48 17       	cp	r20, r24
 26e:	59 07       	cpc	r21, r25
 270:	6a 07       	cpc	r22, r26
 272:	7b 07       	cpc	r23, r27
 274:	e8 f4       	brcc	.+58     	; 0x2b0 <__vector_10+0x134>
      duration = 65536 + current - previous;
 276:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current>
 27a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <current+0x1>
 27e:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <current+0x2>
 282:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <current+0x3>
 286:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <previous>
 28a:	50 91 11 01 	lds	r21, 0x0111	; 0x800111 <previous+0x1>
 28e:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <previous+0x2>
 292:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <previous+0x3>
 296:	84 1b       	sub	r24, r20
 298:	95 0b       	sbc	r25, r21
 29a:	a6 0b       	sbc	r26, r22
 29c:	b7 0b       	sbc	r27, r23
 29e:	11 96       	adiw	r26, 0x01	; 1
 2a0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <duration>
 2a4:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <duration+0x1>
 2a8:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <duration+0x2>
 2ac:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <duration+0x3>
    } 
	
    distance = duration / (2 * 58); // in cm
 2b0:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <duration>
 2b4:	70 91 09 01 	lds	r23, 0x0109	; 0x800109 <duration+0x1>
 2b8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <duration+0x2>
 2bc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <duration+0x3>
 2c0:	24 e7       	ldi	r18, 0x74	; 116
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	50 e0       	ldi	r21, 0x00	; 0
 2c8:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__udivmodsi4>
 2cc:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <distance>
 2d0:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <distance+0x1>
 2d4:	40 93 06 01 	sts	0x0106, r20	; 0x800106 <distance+0x2>
 2d8:	50 93 07 01 	sts	0x0107, r21	; 0x800107 <distance+0x3>

  }
  previous = current;
 2dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <current>
 2e0:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <current+0x1>
 2e4:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <current+0x2>
 2e8:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <current+0x3>
 2ec:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <previous>
 2f0:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <previous+0x1>
 2f4:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <previous+0x2>
 2f8:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <previous+0x3>
  TCCR1B ^= (1 << ICES1); // toggle detecting edge
 2fc:	e1 e8       	ldi	r30, 0x81	; 129
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	90 81       	ld	r25, Z
 302:	80 e4       	ldi	r24, 0x40	; 64
 304:	89 27       	eor	r24, r25
 306:	80 83       	st	Z, r24
}
 308:	ff 91       	pop	r31
 30a:	ef 91       	pop	r30
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__vector_13>:

/**
 * TODO: ISR overflow
 **/
ISR(TIMER1_OVF_vect) 
{
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
	overflow++;
 33c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 340:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 344:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 348:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 34c:	01 96       	adiw	r24, 0x01	; 1
 34e:	a1 1d       	adc	r26, r1
 350:	b1 1d       	adc	r27, r1
 352:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 356:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 35a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 35e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
}
 362:	bf 91       	pop	r27
 364:	af 91       	pop	r26
 366:	9f 91       	pop	r25
 368:	8f 91       	pop	r24
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <GoForward>:
    
} 
 * */

void GoForward() {
    PORTD |= (1 << PORTD4);   // direction of left wheels is forward
 374:	8b b1       	in	r24, 0x0b	; 11
 376:	80 61       	ori	r24, 0x10	; 16
 378:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << PORTD2);   // direction of right wheels is forward
 37a:	8b b1       	in	r24, 0x0b	; 11
 37c:	8b 7f       	andi	r24, 0xFB	; 251
 37e:	8b b9       	out	0x0b, r24	; 11
    OCR2A = 120;
 380:	88 e7       	ldi	r24, 0x78	; 120
 382:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = 120;
 386:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 38a:	08 95       	ret

0000038c <GoBackward>:
}

void GoBackward() {
    PORTD &= ~(1 << PORTD4);   // direction of left wheels is backward
 38c:	8b b1       	in	r24, 0x0b	; 11
 38e:	8f 7e       	andi	r24, 0xEF	; 239
 390:	8b b9       	out	0x0b, r24	; 11
    PORTD |= (1 << PORTD2);   // direction of right wheels is backward
 392:	8b b1       	in	r24, 0x0b	; 11
 394:	84 60       	ori	r24, 0x04	; 4
 396:	8b b9       	out	0x0b, r24	; 11
    OCR2A = 120;
 398:	88 e7       	ldi	r24, 0x78	; 120
 39a:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = 120;
 39e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 3a2:	08 95       	ret

000003a4 <GoRight>:
}

void GoRight() {
    PORTD |= (1 << PORTD4);   // direction of left wheels is forward
 3a4:	8b b1       	in	r24, 0x0b	; 11
 3a6:	80 61       	ori	r24, 0x10	; 16
 3a8:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << PORTD2);   // direction of right wheels is forward
 3aa:	8b b1       	in	r24, 0x0b	; 11
 3ac:	8b 7f       	andi	r24, 0xFB	; 251
 3ae:	8b b9       	out	0x0b, r24	; 11
    OCR2A = 250;
 3b0:	8a ef       	ldi	r24, 0xFA	; 250
 3b2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = 50;
 3b6:	82 e3       	ldi	r24, 0x32	; 50
 3b8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 3bc:	08 95       	ret

000003be <GoLeft>:
}

void GoLeft() {
    PORTD |= (1 << PORTD4);   // direction of left wheels is forward
 3be:	8b b1       	in	r24, 0x0b	; 11
 3c0:	80 61       	ori	r24, 0x10	; 16
 3c2:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << PORTD2);   // direction of right wheels is forward
 3c4:	8b b1       	in	r24, 0x0b	; 11
 3c6:	8b 7f       	andi	r24, 0xFB	; 251
 3c8:	8b b9       	out	0x0b, r24	; 11
    OCR2A = 50;
 3ca:	82 e3       	ldi	r24, 0x32	; 50
 3cc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = 250;
 3d0:	8a ef       	ldi	r24, 0xFA	; 250
 3d2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 3d6:	08 95       	ret

000003d8 <Stop>:
}

void Stop() {
    PORTD |= (1 << PORTD4);   // direction of left wheels is forward
 3d8:	8b b1       	in	r24, 0x0b	; 11
 3da:	80 61       	ori	r24, 0x10	; 16
 3dc:	8b b9       	out	0x0b, r24	; 11
    PORTD &= ~(1 << PORTD2);   // direction of right wheels is forward
 3de:	8b b1       	in	r24, 0x0b	; 11
 3e0:	8b 7f       	andi	r24, 0xFB	; 251
 3e2:	8b b9       	out	0x0b, r24	; 11
    OCR2A = 0;
 3e4:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = 0;
 3e8:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 3ec:	08 95       	ret

000003ee <main>:
}

int main(void) {
    int count = 0;
    UART_initialize();
 3ee:	0e 94 48 00 	call	0x90	; 0x90 <UART_initialize>
    //intialize_Timer0_PWM(); // servo motor
    intialize_Timer1_PWM(); // ultrasonic
 3f2:	0e 94 58 00 	call	0xb0	; 0xb0 <intialize_Timer1_PWM>
    intialize_Timer2_PWM(); // motors speed
 3f6:	0e 94 7d 00 	call	0xfa	; 0xfa <intialize_Timer2_PWM>
    initialize();
 3fa:	0e 94 ac 00 	call	0x158	; 0x158 <initialize>
	DDRB &= ~(1 << DDB2); // BLUETOOTH
 3fe:	84 b1       	in	r24, 0x04	; 4
 400:	8b 7f       	andi	r24, 0xFB	; 251
 402:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << DDB1); // FORWARD
 404:	84 b1       	in	r24, 0x04	; 4
 406:	8d 7f       	andi	r24, 0xFD	; 253
 408:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << DDD5); // BACKWARD
 40a:	8a b1       	in	r24, 0x0a	; 10
 40c:	8f 7d       	andi	r24, 0xDF	; 223
 40e:	8a b9       	out	0x0a, r24	; 10
    OCR2A = 0;
    OCR2B = 0;
}

int main(void) {
    int count = 0;
 410:	c0 e0       	ldi	r28, 0x00	; 0
 412:	d0 e0       	ldi	r29, 0x00	; 0
	DDRD &= ~(1 << DDD5); // BACKWARD
	

    while (1) {
        // ultrasonic trigger every 60ms
        PORTD |= (1 << PORTD7);
 414:	8b b1       	in	r24, 0x0b	; 11
 416:	80 68       	ori	r24, 0x80	; 128
 418:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41a:	8f e8       	ldi	r24, 0x8F	; 143
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
        _delay_ms(0.1);
        PORTD &= ~(1 << PORTD7);
 426:	8b b1       	in	r24, 0x0b	; 11
 428:	8f 77       	andi	r24, 0x7F	; 127
 42a:	8b b9       	out	0x0b, r24	; 11
 42c:	9f ef       	ldi	r25, 0xFF	; 255
 42e:	2d ee       	ldi	r18, 0xED	; 237
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	91 50       	subi	r25, 0x01	; 1
 434:	20 40       	sbci	r18, 0x00	; 0
 436:	80 40       	sbci	r24, 0x00	; 0
 438:	e1 f7       	brne	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	00 c0       	rjmp	.+0      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43c:	00 00       	nop
        _delay_ms(60);

        //sprintf(buffer, "distance %ld, overflow %ld\n", distance, overflow);
        //UART_putstring(buffer);

        if ((PIND & (1 << PIND6))) {
 43e:	4e 9b       	sbis	0x09, 6	; 9
 440:	0b c0       	rjmp	.+22     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 442:	9f ef       	ldi	r25, 0xFF	; 255
 444:	27 ee       	ldi	r18, 0xE7	; 231
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	91 50       	subi	r25, 0x01	; 1
 44a:	20 40       	sbci	r18, 0x00	; 0
 44c:	80 40       	sbci	r24, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 452:	00 00       	nop
            _delay_ms(80);  // debouncing
            if ((PIND & (1 << PIND6))) {
 454:	4e 99       	sbic	0x09, 6	; 9
                count++;
 456:	21 96       	adiw	r28, 0x01	; 1
            }
		}
		
		if (count % 2) { // button press
 458:	c0 ff       	sbrs	r28, 0
 45a:	3f c0       	rjmp	.+126    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
			   else {
				   OCR0B = 0;
			   } 
			   */

			if ((!(PINB & (1 << PINB4))) && (!(PINB & (1 << PINB5))) && ((distance > 8) && (distance < 30))) {
 45c:	1c 99       	sbic	0x03, 4	; 3
 45e:	1d c0       	rjmp	.+58     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 460:	1d 99       	sbic	0x03, 5	; 3
 462:	1b c0       	rjmp	.+54     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 464:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <distance>
 468:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <distance+0x1>
 46c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <distance+0x2>
 470:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <distance+0x3>
 474:	09 97       	sbiw	r24, 0x09	; 9
 476:	a1 05       	cpc	r26, r1
 478:	b1 05       	cpc	r27, r1
 47a:	78 f0       	brcs	.+30     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 47c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <distance>
 480:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <distance+0x1>
 484:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <distance+0x2>
 488:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <distance+0x3>
 48c:	4e 97       	sbiw	r24, 0x1e	; 30
 48e:	a1 05       	cpc	r26, r1
 490:	b1 05       	cpc	r27, r1
 492:	18 f4       	brcc	.+6      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
				GoForward();
 494:	0e 94 ba 01 	call	0x374	; 0x374 <GoForward>
 498:	bd cf       	rjmp	.-134    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			}
			else if ((!(PINB & (1 << PINB5))) && (PINB & (1 << PINB4))) { // only right
 49a:	1d 99       	sbic	0x03, 5	; 3
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 49e:	1c 9b       	sbis	0x03, 4	; 3
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
				GoRight();
 4a2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <GoRight>
 4a6:	b6 cf       	rjmp	.-148    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			}
			else if ((PINB & (1 << PINB5)) && (!(PINB & (1 << PINB4)))) { // only left
 4a8:	1d 9b       	sbis	0x03, 5	; 3
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4ac:	1c 99       	sbic	0x03, 4	; 3
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
				GoLeft();
 4b0:	0e 94 df 01 	call	0x3be	; 0x3be <GoLeft>
 4b4:	af cf       	rjmp	.-162    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			}
			else if (distance < 5) {
 4b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <distance>
 4ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <distance+0x1>
 4be:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <distance+0x2>
 4c2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <distance+0x3>
 4c6:	05 97       	sbiw	r24, 0x05	; 5
 4c8:	a1 05       	cpc	r26, r1
 4ca:	b1 05       	cpc	r27, r1
 4cc:	18 f4       	brcc	.+6      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
				GoBackward();
 4ce:	0e 94 c6 01 	call	0x38c	; 0x38c <GoBackward>
 4d2:	a0 cf       	rjmp	.-192    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			}
			else {
				Stop();
 4d4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Stop>
 4d8:	9d cf       	rjmp	.-198    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
			}
		}
		else {
			
			if (!(PINB & (1 << PINB2))) // BLUETOOTH IS ON
 4da:	1a 99       	sbic	0x03, 2	; 3
 4dc:	08 c0       	rjmp	.+16     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
			{
				if (!(PINB & (1 << PINB1)))
 4de:	19 9b       	sbis	0x03, 1	; 3
				{
					GoLeft();
 4e0:	0e 94 df 01 	call	0x3be	; 0x3be <GoLeft>
					//_delay_ms(1000);
				}
				
				if (!(PIND & (1 << PIND5)))
 4e4:	4d 99       	sbic	0x09, 5	; 9
 4e6:	96 cf       	rjmp	.-212    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
				{
					GoRight();
 4e8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <GoRight>
 4ec:	93 cf       	rjmp	.-218    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
					//_delay_ms(1000);
				}
			} else {
			
				OCR2A = 0;
 4ee:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				OCR2B = 0;
 4f2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 4f6:	8e cf       	rjmp	.-228    	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>

000004f8 <__udivmodsi4>:
 4f8:	a1 e2       	ldi	r26, 0x21	; 33
 4fa:	1a 2e       	mov	r1, r26
 4fc:	aa 1b       	sub	r26, r26
 4fe:	bb 1b       	sub	r27, r27
 500:	fd 01       	movw	r30, r26
 502:	0d c0       	rjmp	.+26     	; 0x51e <__udivmodsi4_ep>

00000504 <__udivmodsi4_loop>:
 504:	aa 1f       	adc	r26, r26
 506:	bb 1f       	adc	r27, r27
 508:	ee 1f       	adc	r30, r30
 50a:	ff 1f       	adc	r31, r31
 50c:	a2 17       	cp	r26, r18
 50e:	b3 07       	cpc	r27, r19
 510:	e4 07       	cpc	r30, r20
 512:	f5 07       	cpc	r31, r21
 514:	20 f0       	brcs	.+8      	; 0x51e <__udivmodsi4_ep>
 516:	a2 1b       	sub	r26, r18
 518:	b3 0b       	sbc	r27, r19
 51a:	e4 0b       	sbc	r30, r20
 51c:	f5 0b       	sbc	r31, r21

0000051e <__udivmodsi4_ep>:
 51e:	66 1f       	adc	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	1a 94       	dec	r1
 528:	69 f7       	brne	.-38     	; 0x504 <__udivmodsi4_loop>
 52a:	60 95       	com	r22
 52c:	70 95       	com	r23
 52e:	80 95       	com	r24
 530:	90 95       	com	r25
 532:	9b 01       	movw	r18, r22
 534:	ac 01       	movw	r20, r24
 536:	bd 01       	movw	r22, r26
 538:	cf 01       	movw	r24, r30
 53a:	08 95       	ret

0000053c <_exit>:
 53c:	f8 94       	cli

0000053e <__stop_program>:
 53e:	ff cf       	rjmp	.-2      	; 0x53e <__stop_program>
