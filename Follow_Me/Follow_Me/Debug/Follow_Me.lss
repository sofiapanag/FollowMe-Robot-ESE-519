
Follow_Me.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000c5a  00000cee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080011c  0080011c  00000d0a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac9  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  00001911  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a0  00000000  00000000  000020ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00002790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c0  00000000  00000000  0000291c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000280  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 33       	cpi	r26, 0x38	; 56
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0f 02 	call	0x41e	; 0x41e <main>
  9e:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <intialize_Timer1_PWM>:

/************************************************************************/
/* initialize Timer 1 PWM                                                */
/************************************************************************/
void intialize_Timer1_PWM() {
  cli();               // disable global interrupts
  a6:	f8 94       	cli
  DDRD |= (1 << DDD3); // set pin D3 as output (OC2B)
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	8a b9       	out	0x0a, r24	; 10

  // set timer prescaler to 1024
  TCCR2B |= (1 << CS20);
  ae:	a1 eb       	ldi	r26, 0xB1	; 177
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	8c 91       	ld	r24, X
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	8c 93       	st	X, r24
  TCCR2B |= (1 << CS21);
  b8:	8c 91       	ld	r24, X
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	8c 93       	st	X, r24
  TCCR2B |= (1 << CS22);
  be:	8c 91       	ld	r24, X
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	8c 93       	st	X, r24

  // set phase correct
  TCCR2A |= (1 << WGM20);
  c4:	e0 eb       	ldi	r30, 0xB0	; 176
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	80 83       	st	Z, r24
  TCCR2A &= ~(1 << WGM21);
  ce:	80 81       	ld	r24, Z
  d0:	8d 7f       	andi	r24, 0xFD	; 253
  d2:	80 83       	st	Z, r24
  TCCR2B |= (1 << WGM22);
  d4:	8c 91       	ld	r24, X
  d6:	88 60       	ori	r24, 0x08	; 8
  d8:	8c 93       	st	X, r24

  // clear OC2B on compare match, set OC2B at Bottom
  TCCR2A &= ~(1 << COM2B0);
  da:	80 81       	ld	r24, Z
  dc:	8f 7e       	andi	r24, 0xEF	; 239
  de:	80 83       	st	Z, r24
  TCCR2A |= (1 << COM2B1);
  e0:	80 81       	ld	r24, Z
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	80 83       	st	Z, r24

  OCR2A = 255;  // freq of 20Hz for the motors, OCR0A=16MHz/(2*1024*30)
  e6:	e3 eb       	ldi	r30, 0xB3	; 179
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	80 83       	st	Z, r24
  OCR2B = OCR2A/2; // 50 % duty cycle
  ee:	80 81       	ld	r24, Z
  f0:	86 95       	lsr	r24
  f2:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
  sei(); // enable global interrupts
  f6:	78 94       	sei
  f8:	08 95       	ret

000000fa <intialize_Timer0_PWM>:

/************************************************************************/
/* initialization of Timer 0 PWM										*/
/************************************************************************/
void intialize_Timer0_PWM() {
	cli();
  fa:	f8 94       	cli
	//OUTPUT OF ARDUINO: LEFT MOTORS
	DDRD |= (1 << DDD5); // set pin D5 as output (OC0B)
  fc:	8a b1       	in	r24, 0x0a	; 10
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	8a b9       	out	0x0a, r24	; 10
	
	// set timer prescaler to 1024
	TCCR0B |= (1 << CS00);
 102:	85 b5       	in	r24, 0x25	; 37
 104:	81 60       	ori	r24, 0x01	; 1
 106:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1 << CS01);
 108:	85 b5       	in	r24, 0x25	; 37
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1 << CS02);
 10e:	85 b5       	in	r24, 0x25	; 37
 110:	84 60       	ori	r24, 0x04	; 4
 112:	85 bd       	out	0x25, r24	; 37

	// phase correct PWM
	TCCR0A |= (1 << WGM00);
 114:	84 b5       	in	r24, 0x24	; 36
 116:	81 60       	ori	r24, 0x01	; 1
 118:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1 << WGM01);
 11a:	84 b5       	in	r24, 0x24	; 36
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << WGM02);
 120:	85 b5       	in	r24, 0x25	; 37
 122:	88 60       	ori	r24, 0x08	; 8
 124:	85 bd       	out	0x25, r24	; 37

	// clear OC0B on compare match, set OC0B at Bottom
	TCCR0A &= ~(1 << COM0B0);
 126:	84 b5       	in	r24, 0x24	; 36
 128:	8f 7e       	andi	r24, 0xEF	; 239
 12a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1);
 12c:	84 b5       	in	r24, 0x24	; 36
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	84 bd       	out	0x24, r24	; 36
	OCR0A = 255;  // freq of 20Hz for the motors, OCR0A=16MHz/(2*1024*20)
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	87 bd       	out	0x27, r24	; 39
	OCR0B = OCR0A/2; // 50 % duty cycle
 136:	87 b5       	in	r24, 0x27	; 39
 138:	86 95       	lsr	r24
 13a:	88 bd       	out	0x28, r24	; 40
	sei();
 13c:	78 94       	sei
 13e:	08 95       	ret

00000140 <initialize>:
/************************************************************************/
/*   //INPUT OF ARDUINO: ULTRASONIC										*/                                                                    
/************************************************************************/

void initialize() {
  cli(); // disable global interrupts
 140:	f8 94       	cli

  // initialize ultrasonic ports
  DDRD |= (1 << DDD7);    // set pin D7 as output
 142:	8a b1       	in	r24, 0x0a	; 10
 144:	80 68       	ori	r24, 0x80	; 128
 146:	8a b9       	out	0x0a, r24	; 10
  DDRB &= ~(1 << DDB0);   // set pin B0 as input (input capture timer 1)
 148:	84 b1       	in	r24, 0x04	; 4
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	84 b9       	out	0x04, r24	; 4
  PORTB |= (1 << PORTB0); // enable internal pull up resistor
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 b9       	out	0x05, r24	; 5

  // initialize ultrasonic timer 1
  TCCR1B &= ~(1 << CS10); // set timer prescaler to 8
 154:	e1 e8       	ldi	r30, 0x81	; 129
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	8e 7f       	andi	r24, 0xFE	; 254
 15c:	80 83       	st	Z, r24
  TCCR1B |= (1 << CS11);
 15e:	80 81       	ld	r24, Z
 160:	82 60       	ori	r24, 0x02	; 2
 162:	80 83       	st	Z, r24
  TCCR1B &= ~(1 << CS12);
 164:	80 81       	ld	r24, Z
 166:	8b 7f       	andi	r24, 0xFB	; 251
 168:	80 83       	st	Z, r24
  
  // input capture configurations
  TIMSK1 |= (1 << ICIE1); // enable input capture interrupt
 16a:	af e6       	ldi	r26, 0x6F	; 111
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	8c 91       	ld	r24, X
 170:	80 62       	ori	r24, 0x20	; 32
 172:	8c 93       	st	X, r24
  TCCR1B |= (1 << ICES1); // detecting rising edge
 174:	80 81       	ld	r24, Z
 176:	80 64       	ori	r24, 0x40	; 64
 178:	80 83       	st	Z, r24
  TIFR1 |= (1 << ICF1);   // clear input capture flag
 17a:	86 b3       	in	r24, 0x16	; 22
 17c:	80 62       	ori	r24, 0x20	; 32
 17e:	86 bb       	out	0x16, r24	; 22
  TIFR1 |= (1 << TOV1);  // overflow flag   
 180:	86 b3       	in	r24, 0x16	; 22
 182:	81 60       	ori	r24, 0x01	; 1
 184:	86 bb       	out	0x16, r24	; 22
 
  sei(); // enable global interrupts
 186:	78 94       	sei
 188:	08 95       	ret

0000018a <__vector_10>:
/************************************************************************/
/* Ultrasonic ISR.														*/
/* TODO: see how to modify overflow variable 									*/
/************************************************************************/

ISR(TIMER1_CAPT_vect) { // ultrasonic
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
  
  if ((TCCR1B & (1 << ICES1))) { // rising edge -- setup dot and dash
 1ac:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1b0:	86 ff       	sbrs	r24, 6
 1b2:	0d c0       	rjmp	.+26     	; 0x1ce <__vector_10+0x44>
	  overflow = 0;
 1b4:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
 1b8:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 1bc:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end+0x2>
 1c0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <__data_end+0x3>
	  TIMSK1 |= (1 << TOIE1); // overflow interrupt is -- TOV1 flag
 1c4:	ef e6       	ldi	r30, 0x6F	; 111
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	80 83       	st	Z, r24
  }
  
  TIFR1 |= (1 << ICF1); // clear input capture flag
 1ce:	86 b3       	in	r24, 0x16	; 22
 1d0:	80 62       	ori	r24, 0x20	; 32
 1d2:	86 bb       	out	0x16, r24	; 22
  current = ICR1;
 1d4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1d8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1dc:	a0 e0       	ldi	r26, 0x00	; 0
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <current>
 1e4:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <current+0x1>
 1e8:	a0 93 2a 01 	sts	0x012A, r26	; 0x80012a <current+0x2>
 1ec:	b0 93 2b 01 	sts	0x012B, r27	; 0x80012b <current+0x3>
  
  if (!(TCCR1B & (1 << ICES1))) { // if detecting falling edge
 1f0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1f4:	86 fd       	sbrc	r24, 6
 1f6:	79 c0       	rjmp	.+242    	; 0x2ea <__vector_10+0x160>
    if (current > previous) {
 1f8:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <current>
 1fc:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <current+0x1>
 200:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <current+0x2>
 204:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <current+0x3>
 208:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <previous>
 20c:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <previous+0x1>
 210:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <previous+0x2>
 214:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <previous+0x3>
 218:	84 17       	cp	r24, r20
 21a:	95 07       	cpc	r25, r21
 21c:	a6 07       	cpc	r26, r22
 21e:	b7 07       	cpc	r27, r23
 220:	e0 f4       	brcc	.+56     	; 0x25a <__vector_10+0xd0>
      duration = current - previous;
 222:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 226:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 22a:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <current+0x2>
 22e:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <current+0x3>
 232:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <previous>
 236:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <previous+0x1>
 23a:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <previous+0x2>
 23e:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <previous+0x3>
 242:	84 1b       	sub	r24, r20
 244:	95 0b       	sbc	r25, r21
 246:	a6 0b       	sbc	r26, r22
 248:	b7 0b       	sbc	r27, r23
 24a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <duration>
 24e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <duration+0x1>
 252:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <duration+0x2>
 256:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <duration+0x3>
    } 
	if (current < previous) {
 25a:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <current>
 25e:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <current+0x1>
 262:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <current+0x2>
 266:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <current+0x3>
 26a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <previous>
 26e:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <previous+0x1>
 272:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <previous+0x2>
 276:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <previous+0x3>
 27a:	48 17       	cp	r20, r24
 27c:	59 07       	cpc	r21, r25
 27e:	6a 07       	cpc	r22, r26
 280:	7b 07       	cpc	r23, r27
 282:	e8 f4       	brcc	.+58     	; 0x2be <__vector_10+0x134>
      duration = 65536 + current - previous;
 284:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 288:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 28c:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <current+0x2>
 290:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <current+0x3>
 294:	40 91 2c 01 	lds	r20, 0x012C	; 0x80012c <previous>
 298:	50 91 2d 01 	lds	r21, 0x012D	; 0x80012d <previous+0x1>
 29c:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <previous+0x2>
 2a0:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <previous+0x3>
 2a4:	84 1b       	sub	r24, r20
 2a6:	95 0b       	sbc	r25, r21
 2a8:	a6 0b       	sbc	r26, r22
 2aa:	b7 0b       	sbc	r27, r23
 2ac:	11 96       	adiw	r26, 0x01	; 1
 2ae:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <duration>
 2b2:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <duration+0x1>
 2b6:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <duration+0x2>
 2ba:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <duration+0x3>
    } 
	
    distance = duration / (2 * 58); // in cm
 2be:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <duration>
 2c2:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <duration+0x1>
 2c6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <duration+0x2>
 2ca:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <duration+0x3>
 2ce:	24 e7       	ldi	r18, 0x74	; 116
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	0e 94 1f 03 	call	0x63e	; 0x63e <__udivmodsi4>
 2da:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <distance>
 2de:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <distance+0x1>
 2e2:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <distance+0x2>
 2e6:	50 93 23 01 	sts	0x0123, r21	; 0x800123 <distance+0x3>
  }
  previous = current;
 2ea:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <current>
 2ee:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <current+0x1>
 2f2:	a0 91 2a 01 	lds	r26, 0x012A	; 0x80012a <current+0x2>
 2f6:	b0 91 2b 01 	lds	r27, 0x012B	; 0x80012b <current+0x3>
 2fa:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <previous>
 2fe:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <previous+0x1>
 302:	a0 93 2e 01 	sts	0x012E, r26	; 0x80012e <previous+0x2>
 306:	b0 93 2f 01 	sts	0x012F, r27	; 0x80012f <previous+0x3>
  TCCR1B ^= (1 << ICES1); // toggle detecting edge
 30a:	e1 e8       	ldi	r30, 0x81	; 129
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	90 81       	ld	r25, Z
 310:	80 e4       	ldi	r24, 0x40	; 64
 312:	89 27       	eor	r24, r25
 314:	80 83       	st	Z, r24
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_13>:

/**
 * TODO: ISR overflow
 **/
ISR(TIMER1_OVF_vect) 
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
	overflow++;
 34a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 34e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 352:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <__data_end+0x2>
 356:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <__data_end+0x3>
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	a1 1d       	adc	r26, r1
 35e:	b1 1d       	adc	r27, r1
 360:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 364:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 368:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <__data_end+0x2>
 36c:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <__data_end+0x3>
}
 370:	bf 91       	pop	r27
 372:	af 91       	pop	r26
 374:	9f 91       	pop	r25
 376:	8f 91       	pop	r24
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <GoForward>:
    
} 
 * */

void GoForward() {
  DirLeft = 1;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <DirLeft+0x1>
 38a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <DirLeft>
  DirRight = 1;
 38e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <DirRight+0x1>
 392:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <DirRight>
  OCR0B = 120;
 396:	88 e7       	ldi	r24, 0x78	; 120
 398:	88 bd       	out	0x28, r24	; 40
  OCR2B = 120;
 39a:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 39e:	08 95       	ret

000003a0 <GoBackward>:
}

void GoBackward() {
  DirLeft = 0;
 3a0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <DirLeft+0x1>
 3a4:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <DirLeft>
  DirRight = 0;
 3a8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <DirRight+0x1>
 3ac:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <DirRight>
  // changed this to 50% duty cycle for testing. 
  OCR0B = OCR0A/2;
 3b0:	87 b5       	in	r24, 0x27	; 39
 3b2:	86 95       	lsr	r24
 3b4:	88 bd       	out	0x28, r24	; 40
  OCR2B = OCR2A/2;
 3b6:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 3ba:	86 95       	lsr	r24
 3bc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 3c0:	08 95       	ret

000003c2 <GoRight>:
}

void GoRight() {
  DirLeft = 1;  // motors 1,2
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <DirLeft+0x1>
 3ca:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <DirLeft>
  DirRight = 0; // motors 3,4
 3ce:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <DirRight+0x1>
 3d2:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <DirRight>
  OCR0B = 200;
 3d6:	88 ec       	ldi	r24, 0xC8	; 200
 3d8:	88 bd       	out	0x28, r24	; 40
  OCR2B = 100;
 3da:	84 e6       	ldi	r24, 0x64	; 100
 3dc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 3e0:	08 95       	ret

000003e2 <GoLeft>:
}

void GoLeft() {
  DirLeft = 0;
 3e2:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <DirLeft+0x1>
 3e6:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <DirLeft>
  DirRight = 1;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <DirRight+0x1>
 3f2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <DirRight>
  OCR0B = 100;
 3f6:	84 e6       	ldi	r24, 0x64	; 100
 3f8:	88 bd       	out	0x28, r24	; 40
  OCR2B = 200;
 3fa:	88 ec       	ldi	r24, 0xC8	; 200
 3fc:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 400:	08 95       	ret

00000402 <Stop>:
}

void Stop() {
  DirLeft = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <DirLeft+0x1>
 40a:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <DirLeft>
  DirRight = 1;
 40e:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <DirRight+0x1>
 412:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <DirRight>
  OCR0B = 0;
 416:	18 bc       	out	0x28, r1	; 40
  OCR2B = 0;
 418:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 41c:	08 95       	ret

0000041e <main>:
}

int main(void) {
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
 426:	69 97       	sbiw	r28, 0x19	; 25
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	f8 94       	cli
 42c:	de bf       	out	0x3e, r29	; 62
 42e:	0f be       	out	0x3f, r0	; 63
 430:	cd bf       	out	0x3d, r28	; 61
  const int baud_rate = 9600;
  initialize_UART(baud_rate);
 432:	80 e8       	ldi	r24, 0x80	; 128
 434:	95 e2       	ldi	r25, 0x25	; 37
 436:	0e 94 de 02 	call	0x5bc	; 0x5bc <initialize_UART>
  intialize_Timer0_PWM();
 43a:	0e 94 7d 00 	call	0xfa	; 0xfa <intialize_Timer0_PWM>
  intialize_Timer1_PWM();
 43e:	0e 94 53 00 	call	0xa6	; 0xa6 <intialize_Timer1_PWM>
  initialize();
 442:	0e 94 a0 00 	call	0x140	; 0x140 <initialize>

  while (1) {
    // ultrasonic trigger every 60ms
    PORTD |= (1 << PORTD7);
 446:	8b b1       	in	r24, 0x0b	; 11
 448:	80 68       	ori	r24, 0x80	; 128
 44a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44c:	8f e8       	ldi	r24, 0x8F	; 143
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <main+0x32>
 454:	00 c0       	rjmp	.+0      	; 0x456 <main+0x38>
 456:	00 00       	nop
    _delay_ms(0.1);
    PORTD &= ~(1 << PORTD7);
 458:	8b b1       	in	r24, 0x0b	; 11
 45a:	8f 77       	andi	r24, 0x7F	; 127
 45c:	8b b9       	out	0x0b, r24	; 11
 45e:	9f ef       	ldi	r25, 0xFF	; 255
 460:	ed ee       	ldi	r30, 0xED	; 237
 462:	f2 e0       	ldi	r31, 0x02	; 2
 464:	91 50       	subi	r25, 0x01	; 1
 466:	e0 40       	sbci	r30, 0x00	; 0
 468:	f0 40       	sbci	r31, 0x00	; 0
 46a:	e1 f7       	brne	.-8      	; 0x464 <main+0x46>
 46c:	00 c0       	rjmp	.+0      	; 0x46e <main+0x50>
 46e:	00 00       	nop
    _delay_ms(60);

    char buffer[25] = {'\0'};
 470:	8e 01       	movw	r16, r28
 472:	0f 5f       	subi	r16, 0xFF	; 255
 474:	1f 4f       	sbci	r17, 0xFF	; 255
 476:	89 e1       	ldi	r24, 0x19	; 25
 478:	f8 01       	movw	r30, r16
 47a:	11 92       	st	Z+, r1
 47c:	8a 95       	dec	r24
 47e:	e9 f7       	brne	.-6      	; 0x47a <main+0x5c>
    sprintf(buffer, "distance %ld, overflow %ld\n", distance, overflow);
 480:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__data_end>
 484:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <__data_end+0x1>
 488:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <__data_end+0x2>
 48c:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <__data_end+0x3>
 490:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <distance>
 494:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <distance+0x1>
 498:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <distance+0x2>
 49c:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <distance+0x3>
 4a0:	7f 93       	push	r23
 4a2:	6f 93       	push	r22
 4a4:	5f 93       	push	r21
 4a6:	4f 93       	push	r20
 4a8:	bf 93       	push	r27
 4aa:	af 93       	push	r26
 4ac:	9f 93       	push	r25
 4ae:	8f 93       	push	r24
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	9f 93       	push	r25
 4b6:	8f 93       	push	r24
 4b8:	1f 93       	push	r17
 4ba:	0f 93       	push	r16
 4bc:	0e 94 41 03 	call	0x682	; 0x682 <sprintf>
    putstring_UART(buffer);
 4c0:	c8 01       	movw	r24, r16
 4c2:	0e 94 12 03 	call	0x624	; 0x624 <putstring_UART>

    if ((IRright == 1) && (IRleft == 1) && (distance > 10 && distance < 30)) {
 4c6:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <IRright>
 4ca:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <IRright+0x1>
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	91 05       	cpc	r25, r1
 4dc:	21 f5       	brne	.+72     	; 0x526 <main+0x108>
 4de:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <IRleft>
 4e2:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <IRleft+0x1>
 4e6:	21 30       	cpi	r18, 0x01	; 1
 4e8:	31 05       	cpc	r19, r1
 4ea:	e9 f4       	brne	.+58     	; 0x526 <main+0x108>
 4ec:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <distance>
 4f0:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <distance+0x1>
 4f4:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <distance+0x2>
 4f8:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <distance+0x3>
 4fc:	4b 30       	cpi	r20, 0x0B	; 11
 4fe:	51 05       	cpc	r21, r1
 500:	61 05       	cpc	r22, r1
 502:	71 05       	cpc	r23, r1
 504:	80 f0       	brcs	.+32     	; 0x526 <main+0x108>
 506:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <distance>
 50a:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <distance+0x1>
 50e:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <distance+0x2>
 512:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <distance+0x3>
 516:	4e 31       	cpi	r20, 0x1E	; 30
 518:	51 05       	cpc	r21, r1
 51a:	61 05       	cpc	r22, r1
 51c:	71 05       	cpc	r23, r1
 51e:	18 f4       	brcc	.+6      	; 0x526 <main+0x108>
      GoForward();
 520:	0e 94 c1 01 	call	0x382	; 0x382 <GoForward>
 524:	90 cf       	rjmp	.-224    	; 0x446 <main+0x28>
    } else if ((IRright == 1) && (IRleft == 0)) {
 526:	81 30       	cpi	r24, 0x01	; 1
 528:	91 05       	cpc	r25, r1
 52a:	49 f4       	brne	.+18     	; 0x53e <main+0x120>
 52c:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <IRleft>
 530:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <IRleft+0x1>
 534:	23 2b       	or	r18, r19
 536:	19 f4       	brne	.+6      	; 0x53e <main+0x120>
      GoLeft();
 538:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <GoLeft>
 53c:	84 cf       	rjmp	.-248    	; 0x446 <main+0x28>
    } else if ((IRright == 0) && (IRleft == 1)) {
 53e:	00 97       	sbiw	r24, 0x00	; 0
 540:	51 f4       	brne	.+20     	; 0x556 <main+0x138>
 542:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <IRleft>
 546:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <IRleft+0x1>
 54a:	21 30       	cpi	r18, 0x01	; 1
 54c:	31 05       	cpc	r19, r1
 54e:	19 f4       	brne	.+6      	; 0x556 <main+0x138>
      GoRight();
 550:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <GoRight>
 554:	78 cf       	rjmp	.-272    	; 0x446 <main+0x28>
    } else if (((IRright == 1) && (IRleft == 1)) && ((distance > 5) && (distance < 10))) {
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	09 f5       	brne	.+66     	; 0x59c <main+0x17e>
 55a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <IRleft>
 55e:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <IRleft+0x1>
 562:	01 97       	sbiw	r24, 0x01	; 1
 564:	d9 f4       	brne	.+54     	; 0x59c <main+0x17e>
 566:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <distance>
 56a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <distance+0x1>
 56e:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <distance+0x2>
 572:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <distance+0x3>
 576:	06 97       	sbiw	r24, 0x06	; 6
 578:	a1 05       	cpc	r26, r1
 57a:	b1 05       	cpc	r27, r1
 57c:	78 f0       	brcs	.+30     	; 0x59c <main+0x17e>
 57e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <distance>
 582:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <distance+0x1>
 586:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <distance+0x2>
 58a:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <distance+0x3>
 58e:	0a 97       	sbiw	r24, 0x0a	; 10
 590:	a1 05       	cpc	r26, r1
 592:	b1 05       	cpc	r27, r1
 594:	18 f4       	brcc	.+6      	; 0x59c <main+0x17e>
      Stop();
 596:	0e 94 01 02 	call	0x402	; 0x402 <Stop>
 59a:	55 cf       	rjmp	.-342    	; 0x446 <main+0x28>
    } else if (distance < 5) {
 59c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <distance>
 5a0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <distance+0x1>
 5a4:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <distance+0x2>
 5a8:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <distance+0x3>
 5ac:	05 97       	sbiw	r24, 0x05	; 5
 5ae:	a1 05       	cpc	r26, r1
 5b0:	b1 05       	cpc	r27, r1
 5b2:	08 f0       	brcs	.+2      	; 0x5b6 <main+0x198>
 5b4:	48 cf       	rjmp	.-368    	; 0x446 <main+0x28>
      GoBackward();
 5b6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <GoBackward>
    }
  }
 5ba:	45 cf       	rjmp	.-374    	; 0x446 <main+0x28>

000005bc <initialize_UART>:

#define BUFFER_SIZE 1024

void initialize_UART(int baud_rate)
{
	int baud_prescaler = (F_CPU / (baud_rate * 16UL)) - 1; // see table 19.1 on datasheet
 5bc:	09 2e       	mov	r0, r25
 5be:	00 0c       	add	r0, r0
 5c0:	aa 0b       	sbc	r26, r26
 5c2:	bb 0b       	sbc	r27, r27
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	aa 1f       	adc	r26, r26
 5ca:	bb 1f       	adc	r27, r27
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	aa 1f       	adc	r26, r26
 5d2:	bb 1f       	adc	r27, r27
 5d4:	9c 01       	movw	r18, r24
 5d6:	ad 01       	movw	r20, r26
 5d8:	22 0f       	add	r18, r18
 5da:	33 1f       	adc	r19, r19
 5dc:	44 1f       	adc	r20, r20
 5de:	55 1f       	adc	r21, r21
 5e0:	22 0f       	add	r18, r18
 5e2:	33 1f       	adc	r19, r19
 5e4:	44 1f       	adc	r20, r20
 5e6:	55 1f       	adc	r21, r21
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	74 e2       	ldi	r23, 0x24	; 36
 5ec:	84 ef       	ldi	r24, 0xF4	; 244
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 1f 03 	call	0x63e	; 0x63e <__udivmodsi4>
 5f4:	21 50       	subi	r18, 0x01	; 1
 5f6:	31 09       	sbc	r19, r1
	// setting baud rate 9600 - UBRRn = 103
	UBRR0H = (unsigned char)(baud_prescaler>>8);
 5f8:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)baud_prescaler;
 5fc:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// rx and tx
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); // TX
 600:	88 e1       	ldi	r24, 0x18	; 24
 602:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// 8 data bits
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 606:	e2 ec       	ldi	r30, 0xC2	; 194
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	86 e0       	ldi	r24, 0x06	; 6
 60c:	80 83       	st	Z, r24
	// 2 stop bits
	UCSR0C |= (1 << USBS0);
 60e:	80 81       	ld	r24, Z
 610:	88 60       	ori	r24, 0x08	; 8
 612:	80 83       	st	Z, r24
 614:	08 95       	ret

00000616 <send_UART>:
}

void send_UART(unsigned char data)
{
	while(!(UCSR0A & (1 << UDRE0)));
 616:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 61a:	95 ff       	sbrs	r25, 5
 61c:	fc cf       	rjmp	.-8      	; 0x616 <send_UART>
	UDR0 = data;
 61e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 622:	08 95       	ret

00000624 <putstring_UART>:
}

void putstring_UART(char *strptr)
{
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	ec 01       	movw	r28, r24
	while (*strptr)
 62a:	03 c0       	rjmp	.+6      	; 0x632 <putstring_UART+0xe>
	{
		send_UART(*strptr);
 62c:	0e 94 0b 03 	call	0x616	; 0x616 <send_UART>
		strptr++;
 630:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = data;
}

void putstring_UART(char *strptr)
{
	while (*strptr)
 632:	88 81       	ld	r24, Y
 634:	81 11       	cpse	r24, r1
 636:	fa cf       	rjmp	.-12     	; 0x62c <putstring_UART+0x8>
	{
		send_UART(*strptr);
		strptr++;
	}
}
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	08 95       	ret

0000063e <__udivmodsi4>:
 63e:	a1 e2       	ldi	r26, 0x21	; 33
 640:	1a 2e       	mov	r1, r26
 642:	aa 1b       	sub	r26, r26
 644:	bb 1b       	sub	r27, r27
 646:	fd 01       	movw	r30, r26
 648:	0d c0       	rjmp	.+26     	; 0x664 <__udivmodsi4_ep>

0000064a <__udivmodsi4_loop>:
 64a:	aa 1f       	adc	r26, r26
 64c:	bb 1f       	adc	r27, r27
 64e:	ee 1f       	adc	r30, r30
 650:	ff 1f       	adc	r31, r31
 652:	a2 17       	cp	r26, r18
 654:	b3 07       	cpc	r27, r19
 656:	e4 07       	cpc	r30, r20
 658:	f5 07       	cpc	r31, r21
 65a:	20 f0       	brcs	.+8      	; 0x664 <__udivmodsi4_ep>
 65c:	a2 1b       	sub	r26, r18
 65e:	b3 0b       	sbc	r27, r19
 660:	e4 0b       	sbc	r30, r20
 662:	f5 0b       	sbc	r31, r21

00000664 <__udivmodsi4_ep>:
 664:	66 1f       	adc	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	1a 94       	dec	r1
 66e:	69 f7       	brne	.-38     	; 0x64a <__udivmodsi4_loop>
 670:	60 95       	com	r22
 672:	70 95       	com	r23
 674:	80 95       	com	r24
 676:	90 95       	com	r25
 678:	9b 01       	movw	r18, r22
 67a:	ac 01       	movw	r20, r24
 67c:	bd 01       	movw	r22, r26
 67e:	cf 01       	movw	r24, r30
 680:	08 95       	ret

00000682 <sprintf>:
 682:	ae e0       	ldi	r26, 0x0E	; 14
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	e7 e4       	ldi	r30, 0x47	; 71
 688:	f3 e0       	ldi	r31, 0x03	; 3
 68a:	0c 94 02 06 	jmp	0xc04	; 0xc04 <__prologue_saves__+0x1c>
 68e:	0d 89       	ldd	r16, Y+21	; 0x15
 690:	1e 89       	ldd	r17, Y+22	; 0x16
 692:	86 e0       	ldi	r24, 0x06	; 6
 694:	8c 83       	std	Y+4, r24	; 0x04
 696:	1a 83       	std	Y+2, r17	; 0x02
 698:	09 83       	std	Y+1, r16	; 0x01
 69a:	8f ef       	ldi	r24, 0xFF	; 255
 69c:	9f e7       	ldi	r25, 0x7F	; 127
 69e:	9e 83       	std	Y+6, r25	; 0x06
 6a0:	8d 83       	std	Y+5, r24	; 0x05
 6a2:	ae 01       	movw	r20, r28
 6a4:	47 5e       	subi	r20, 0xE7	; 231
 6a6:	5f 4f       	sbci	r21, 0xFF	; 255
 6a8:	6f 89       	ldd	r22, Y+23	; 0x17
 6aa:	78 8d       	ldd	r23, Y+24	; 0x18
 6ac:	ce 01       	movw	r24, r28
 6ae:	01 96       	adiw	r24, 0x01	; 1
 6b0:	0e 94 63 03 	call	0x6c6	; 0x6c6 <vfprintf>
 6b4:	ef 81       	ldd	r30, Y+7	; 0x07
 6b6:	f8 85       	ldd	r31, Y+8	; 0x08
 6b8:	e0 0f       	add	r30, r16
 6ba:	f1 1f       	adc	r31, r17
 6bc:	10 82       	st	Z, r1
 6be:	2e 96       	adiw	r28, 0x0e	; 14
 6c0:	e4 e0       	ldi	r30, 0x04	; 4
 6c2:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__epilogue_restores__+0x1c>

000006c6 <vfprintf>:
 6c6:	ab e0       	ldi	r26, 0x0B	; 11
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	e9 e6       	ldi	r30, 0x69	; 105
 6cc:	f3 e0       	ldi	r31, 0x03	; 3
 6ce:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__prologue_saves__>
 6d2:	6c 01       	movw	r12, r24
 6d4:	7b 01       	movw	r14, r22
 6d6:	8a 01       	movw	r16, r20
 6d8:	fc 01       	movw	r30, r24
 6da:	17 82       	std	Z+7, r1	; 0x07
 6dc:	16 82       	std	Z+6, r1	; 0x06
 6de:	83 81       	ldd	r24, Z+3	; 0x03
 6e0:	81 ff       	sbrs	r24, 1
 6e2:	cc c1       	rjmp	.+920    	; 0xa7c <__stack+0x17d>
 6e4:	ce 01       	movw	r24, r28
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	3c 01       	movw	r6, r24
 6ea:	f6 01       	movw	r30, r12
 6ec:	93 81       	ldd	r25, Z+3	; 0x03
 6ee:	f7 01       	movw	r30, r14
 6f0:	93 fd       	sbrc	r25, 3
 6f2:	85 91       	lpm	r24, Z+
 6f4:	93 ff       	sbrs	r25, 3
 6f6:	81 91       	ld	r24, Z+
 6f8:	7f 01       	movw	r14, r30
 6fa:	88 23       	and	r24, r24
 6fc:	09 f4       	brne	.+2      	; 0x700 <vfprintf+0x3a>
 6fe:	ba c1       	rjmp	.+884    	; 0xa74 <__stack+0x175>
 700:	85 32       	cpi	r24, 0x25	; 37
 702:	39 f4       	brne	.+14     	; 0x712 <vfprintf+0x4c>
 704:	93 fd       	sbrc	r25, 3
 706:	85 91       	lpm	r24, Z+
 708:	93 ff       	sbrs	r25, 3
 70a:	81 91       	ld	r24, Z+
 70c:	7f 01       	movw	r14, r30
 70e:	85 32       	cpi	r24, 0x25	; 37
 710:	29 f4       	brne	.+10     	; 0x71c <vfprintf+0x56>
 712:	b6 01       	movw	r22, r12
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	0e 94 5a 05 	call	0xab4	; 0xab4 <fputc>
 71a:	e7 cf       	rjmp	.-50     	; 0x6ea <vfprintf+0x24>
 71c:	91 2c       	mov	r9, r1
 71e:	21 2c       	mov	r2, r1
 720:	31 2c       	mov	r3, r1
 722:	ff e1       	ldi	r31, 0x1F	; 31
 724:	f3 15       	cp	r31, r3
 726:	d8 f0       	brcs	.+54     	; 0x75e <vfprintf+0x98>
 728:	8b 32       	cpi	r24, 0x2B	; 43
 72a:	79 f0       	breq	.+30     	; 0x74a <vfprintf+0x84>
 72c:	38 f4       	brcc	.+14     	; 0x73c <vfprintf+0x76>
 72e:	80 32       	cpi	r24, 0x20	; 32
 730:	79 f0       	breq	.+30     	; 0x750 <vfprintf+0x8a>
 732:	83 32       	cpi	r24, 0x23	; 35
 734:	a1 f4       	brne	.+40     	; 0x75e <vfprintf+0x98>
 736:	23 2d       	mov	r18, r3
 738:	20 61       	ori	r18, 0x10	; 16
 73a:	1d c0       	rjmp	.+58     	; 0x776 <vfprintf+0xb0>
 73c:	8d 32       	cpi	r24, 0x2D	; 45
 73e:	61 f0       	breq	.+24     	; 0x758 <vfprintf+0x92>
 740:	80 33       	cpi	r24, 0x30	; 48
 742:	69 f4       	brne	.+26     	; 0x75e <vfprintf+0x98>
 744:	23 2d       	mov	r18, r3
 746:	21 60       	ori	r18, 0x01	; 1
 748:	16 c0       	rjmp	.+44     	; 0x776 <vfprintf+0xb0>
 74a:	83 2d       	mov	r24, r3
 74c:	82 60       	ori	r24, 0x02	; 2
 74e:	38 2e       	mov	r3, r24
 750:	e3 2d       	mov	r30, r3
 752:	e4 60       	ori	r30, 0x04	; 4
 754:	3e 2e       	mov	r3, r30
 756:	2a c0       	rjmp	.+84     	; 0x7ac <vfprintf+0xe6>
 758:	f3 2d       	mov	r31, r3
 75a:	f8 60       	ori	r31, 0x08	; 8
 75c:	1d c0       	rjmp	.+58     	; 0x798 <vfprintf+0xd2>
 75e:	37 fc       	sbrc	r3, 7
 760:	2d c0       	rjmp	.+90     	; 0x7bc <vfprintf+0xf6>
 762:	20 ed       	ldi	r18, 0xD0	; 208
 764:	28 0f       	add	r18, r24
 766:	2a 30       	cpi	r18, 0x0A	; 10
 768:	40 f0       	brcs	.+16     	; 0x77a <vfprintf+0xb4>
 76a:	8e 32       	cpi	r24, 0x2E	; 46
 76c:	b9 f4       	brne	.+46     	; 0x79c <vfprintf+0xd6>
 76e:	36 fc       	sbrc	r3, 6
 770:	81 c1       	rjmp	.+770    	; 0xa74 <__stack+0x175>
 772:	23 2d       	mov	r18, r3
 774:	20 64       	ori	r18, 0x40	; 64
 776:	32 2e       	mov	r3, r18
 778:	19 c0       	rjmp	.+50     	; 0x7ac <vfprintf+0xe6>
 77a:	36 fe       	sbrs	r3, 6
 77c:	06 c0       	rjmp	.+12     	; 0x78a <vfprintf+0xc4>
 77e:	8a e0       	ldi	r24, 0x0A	; 10
 780:	98 9e       	mul	r9, r24
 782:	20 0d       	add	r18, r0
 784:	11 24       	eor	r1, r1
 786:	92 2e       	mov	r9, r18
 788:	11 c0       	rjmp	.+34     	; 0x7ac <vfprintf+0xe6>
 78a:	ea e0       	ldi	r30, 0x0A	; 10
 78c:	2e 9e       	mul	r2, r30
 78e:	20 0d       	add	r18, r0
 790:	11 24       	eor	r1, r1
 792:	22 2e       	mov	r2, r18
 794:	f3 2d       	mov	r31, r3
 796:	f0 62       	ori	r31, 0x20	; 32
 798:	3f 2e       	mov	r3, r31
 79a:	08 c0       	rjmp	.+16     	; 0x7ac <vfprintf+0xe6>
 79c:	8c 36       	cpi	r24, 0x6C	; 108
 79e:	21 f4       	brne	.+8      	; 0x7a8 <vfprintf+0xe2>
 7a0:	83 2d       	mov	r24, r3
 7a2:	80 68       	ori	r24, 0x80	; 128
 7a4:	38 2e       	mov	r3, r24
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <vfprintf+0xe6>
 7a8:	88 36       	cpi	r24, 0x68	; 104
 7aa:	41 f4       	brne	.+16     	; 0x7bc <vfprintf+0xf6>
 7ac:	f7 01       	movw	r30, r14
 7ae:	93 fd       	sbrc	r25, 3
 7b0:	85 91       	lpm	r24, Z+
 7b2:	93 ff       	sbrs	r25, 3
 7b4:	81 91       	ld	r24, Z+
 7b6:	7f 01       	movw	r14, r30
 7b8:	81 11       	cpse	r24, r1
 7ba:	b3 cf       	rjmp	.-154    	; 0x722 <vfprintf+0x5c>
 7bc:	98 2f       	mov	r25, r24
 7be:	9f 7d       	andi	r25, 0xDF	; 223
 7c0:	95 54       	subi	r25, 0x45	; 69
 7c2:	93 30       	cpi	r25, 0x03	; 3
 7c4:	28 f4       	brcc	.+10     	; 0x7d0 <vfprintf+0x10a>
 7c6:	0c 5f       	subi	r16, 0xFC	; 252
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	9f e3       	ldi	r25, 0x3F	; 63
 7cc:	99 83       	std	Y+1, r25	; 0x01
 7ce:	0d c0       	rjmp	.+26     	; 0x7ea <vfprintf+0x124>
 7d0:	83 36       	cpi	r24, 0x63	; 99
 7d2:	31 f0       	breq	.+12     	; 0x7e0 <vfprintf+0x11a>
 7d4:	83 37       	cpi	r24, 0x73	; 115
 7d6:	71 f0       	breq	.+28     	; 0x7f4 <vfprintf+0x12e>
 7d8:	83 35       	cpi	r24, 0x53	; 83
 7da:	09 f0       	breq	.+2      	; 0x7de <vfprintf+0x118>
 7dc:	59 c0       	rjmp	.+178    	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 7de:	21 c0       	rjmp	.+66     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 7e0:	f8 01       	movw	r30, r16
 7e2:	80 81       	ld	r24, Z
 7e4:	89 83       	std	Y+1, r24	; 0x01
 7e6:	0e 5f       	subi	r16, 0xFE	; 254
 7e8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea:	88 24       	eor	r8, r8
 7ec:	83 94       	inc	r8
 7ee:	91 2c       	mov	r9, r1
 7f0:	53 01       	movw	r10, r6
 7f2:	13 c0       	rjmp	.+38     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 7f4:	28 01       	movw	r4, r16
 7f6:	f2 e0       	ldi	r31, 0x02	; 2
 7f8:	4f 0e       	add	r4, r31
 7fa:	51 1c       	adc	r5, r1
 7fc:	f8 01       	movw	r30, r16
 7fe:	a0 80       	ld	r10, Z
 800:	b1 80       	ldd	r11, Z+1	; 0x01
 802:	36 fe       	sbrs	r3, 6
 804:	03 c0       	rjmp	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 806:	69 2d       	mov	r22, r9
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80c:	6f ef       	ldi	r22, 0xFF	; 255
 80e:	7f ef       	ldi	r23, 0xFF	; 255
 810:	c5 01       	movw	r24, r10
 812:	0e 94 4f 05 	call	0xa9e	; 0xa9e <strnlen>
 816:	4c 01       	movw	r8, r24
 818:	82 01       	movw	r16, r4
 81a:	f3 2d       	mov	r31, r3
 81c:	ff 77       	andi	r31, 0x7F	; 127
 81e:	3f 2e       	mov	r3, r31
 820:	16 c0       	rjmp	.+44     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 822:	28 01       	movw	r4, r16
 824:	22 e0       	ldi	r18, 0x02	; 2
 826:	42 0e       	add	r4, r18
 828:	51 1c       	adc	r5, r1
 82a:	f8 01       	movw	r30, r16
 82c:	a0 80       	ld	r10, Z
 82e:	b1 80       	ldd	r11, Z+1	; 0x01
 830:	36 fe       	sbrs	r3, 6
 832:	03 c0       	rjmp	.+6      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 834:	69 2d       	mov	r22, r9
 836:	70 e0       	ldi	r23, 0x00	; 0
 838:	02 c0       	rjmp	.+4      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 83a:	6f ef       	ldi	r22, 0xFF	; 255
 83c:	7f ef       	ldi	r23, 0xFF	; 255
 83e:	c5 01       	movw	r24, r10
 840:	0e 94 44 05 	call	0xa88	; 0xa88 <strnlen_P>
 844:	4c 01       	movw	r8, r24
 846:	f3 2d       	mov	r31, r3
 848:	f0 68       	ori	r31, 0x80	; 128
 84a:	3f 2e       	mov	r3, r31
 84c:	82 01       	movw	r16, r4
 84e:	33 fc       	sbrc	r3, 3
 850:	1b c0       	rjmp	.+54     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 852:	82 2d       	mov	r24, r2
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	88 16       	cp	r8, r24
 858:	99 06       	cpc	r9, r25
 85a:	b0 f4       	brcc	.+44     	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 85c:	b6 01       	movw	r22, r12
 85e:	80 e2       	ldi	r24, 0x20	; 32
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 5a 05 	call	0xab4	; 0xab4 <fputc>
 866:	2a 94       	dec	r2
 868:	f4 cf       	rjmp	.-24     	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 86a:	f5 01       	movw	r30, r10
 86c:	37 fc       	sbrc	r3, 7
 86e:	85 91       	lpm	r24, Z+
 870:	37 fe       	sbrs	r3, 7
 872:	81 91       	ld	r24, Z+
 874:	5f 01       	movw	r10, r30
 876:	b6 01       	movw	r22, r12
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 5a 05 	call	0xab4	; 0xab4 <fputc>
 87e:	21 10       	cpse	r2, r1
 880:	2a 94       	dec	r2
 882:	21 e0       	ldi	r18, 0x01	; 1
 884:	82 1a       	sub	r8, r18
 886:	91 08       	sbc	r9, r1
 888:	81 14       	cp	r8, r1
 88a:	91 04       	cpc	r9, r1
 88c:	71 f7       	brne	.-36     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
 88e:	e8 c0       	rjmp	.+464    	; 0xa60 <__stack+0x161>
 890:	84 36       	cpi	r24, 0x64	; 100
 892:	11 f0       	breq	.+4      	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 894:	89 36       	cpi	r24, 0x69	; 105
 896:	41 f5       	brne	.+80     	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
 898:	f8 01       	movw	r30, r16
 89a:	37 fe       	sbrs	r3, 7
 89c:	07 c0       	rjmp	.+14     	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 89e:	60 81       	ld	r22, Z
 8a0:	71 81       	ldd	r23, Z+1	; 0x01
 8a2:	82 81       	ldd	r24, Z+2	; 0x02
 8a4:	93 81       	ldd	r25, Z+3	; 0x03
 8a6:	0c 5f       	subi	r16, 0xFC	; 252
 8a8:	1f 4f       	sbci	r17, 0xFF	; 255
 8aa:	08 c0       	rjmp	.+16     	; 0x8bc <__DATA_REGION_LENGTH__+0xbc>
 8ac:	60 81       	ld	r22, Z
 8ae:	71 81       	ldd	r23, Z+1	; 0x01
 8b0:	07 2e       	mov	r0, r23
 8b2:	00 0c       	add	r0, r0
 8b4:	88 0b       	sbc	r24, r24
 8b6:	99 0b       	sbc	r25, r25
 8b8:	0e 5f       	subi	r16, 0xFE	; 254
 8ba:	1f 4f       	sbci	r17, 0xFF	; 255
 8bc:	f3 2d       	mov	r31, r3
 8be:	ff 76       	andi	r31, 0x6F	; 111
 8c0:	3f 2e       	mov	r3, r31
 8c2:	97 ff       	sbrs	r25, 7
 8c4:	09 c0       	rjmp	.+18     	; 0x8d8 <__DATA_REGION_LENGTH__+0xd8>
 8c6:	90 95       	com	r25
 8c8:	80 95       	com	r24
 8ca:	70 95       	com	r23
 8cc:	61 95       	neg	r22
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	8f 4f       	sbci	r24, 0xFF	; 255
 8d2:	9f 4f       	sbci	r25, 0xFF	; 255
 8d4:	f0 68       	ori	r31, 0x80	; 128
 8d6:	3f 2e       	mov	r3, r31
 8d8:	2a e0       	ldi	r18, 0x0A	; 10
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	a3 01       	movw	r20, r6
 8de:	0e 94 96 05 	call	0xb2c	; 0xb2c <__ultoa_invert>
 8e2:	88 2e       	mov	r8, r24
 8e4:	86 18       	sub	r8, r6
 8e6:	45 c0       	rjmp	.+138    	; 0x972 <__stack+0x73>
 8e8:	85 37       	cpi	r24, 0x75	; 117
 8ea:	31 f4       	brne	.+12     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8ec:	23 2d       	mov	r18, r3
 8ee:	2f 7e       	andi	r18, 0xEF	; 239
 8f0:	b2 2e       	mov	r11, r18
 8f2:	2a e0       	ldi	r18, 0x0A	; 10
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	25 c0       	rjmp	.+74     	; 0x942 <__stack+0x43>
 8f8:	93 2d       	mov	r25, r3
 8fa:	99 7f       	andi	r25, 0xF9	; 249
 8fc:	b9 2e       	mov	r11, r25
 8fe:	8f 36       	cpi	r24, 0x6F	; 111
 900:	c1 f0       	breq	.+48     	; 0x932 <__stack+0x33>
 902:	18 f4       	brcc	.+6      	; 0x90a <__stack+0xb>
 904:	88 35       	cpi	r24, 0x58	; 88
 906:	79 f0       	breq	.+30     	; 0x926 <__stack+0x27>
 908:	b5 c0       	rjmp	.+362    	; 0xa74 <__stack+0x175>
 90a:	80 37       	cpi	r24, 0x70	; 112
 90c:	19 f0       	breq	.+6      	; 0x914 <__stack+0x15>
 90e:	88 37       	cpi	r24, 0x78	; 120
 910:	21 f0       	breq	.+8      	; 0x91a <__stack+0x1b>
 912:	b0 c0       	rjmp	.+352    	; 0xa74 <__stack+0x175>
 914:	e9 2f       	mov	r30, r25
 916:	e0 61       	ori	r30, 0x10	; 16
 918:	be 2e       	mov	r11, r30
 91a:	b4 fe       	sbrs	r11, 4
 91c:	0d c0       	rjmp	.+26     	; 0x938 <__stack+0x39>
 91e:	fb 2d       	mov	r31, r11
 920:	f4 60       	ori	r31, 0x04	; 4
 922:	bf 2e       	mov	r11, r31
 924:	09 c0       	rjmp	.+18     	; 0x938 <__stack+0x39>
 926:	34 fe       	sbrs	r3, 4
 928:	0a c0       	rjmp	.+20     	; 0x93e <__stack+0x3f>
 92a:	29 2f       	mov	r18, r25
 92c:	26 60       	ori	r18, 0x06	; 6
 92e:	b2 2e       	mov	r11, r18
 930:	06 c0       	rjmp	.+12     	; 0x93e <__stack+0x3f>
 932:	28 e0       	ldi	r18, 0x08	; 8
 934:	30 e0       	ldi	r19, 0x00	; 0
 936:	05 c0       	rjmp	.+10     	; 0x942 <__stack+0x43>
 938:	20 e1       	ldi	r18, 0x10	; 16
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0x43>
 93e:	20 e1       	ldi	r18, 0x10	; 16
 940:	32 e0       	ldi	r19, 0x02	; 2
 942:	f8 01       	movw	r30, r16
 944:	b7 fe       	sbrs	r11, 7
 946:	07 c0       	rjmp	.+14     	; 0x956 <__stack+0x57>
 948:	60 81       	ld	r22, Z
 94a:	71 81       	ldd	r23, Z+1	; 0x01
 94c:	82 81       	ldd	r24, Z+2	; 0x02
 94e:	93 81       	ldd	r25, Z+3	; 0x03
 950:	0c 5f       	subi	r16, 0xFC	; 252
 952:	1f 4f       	sbci	r17, 0xFF	; 255
 954:	06 c0       	rjmp	.+12     	; 0x962 <__stack+0x63>
 956:	60 81       	ld	r22, Z
 958:	71 81       	ldd	r23, Z+1	; 0x01
 95a:	80 e0       	ldi	r24, 0x00	; 0
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	0e 5f       	subi	r16, 0xFE	; 254
 960:	1f 4f       	sbci	r17, 0xFF	; 255
 962:	a3 01       	movw	r20, r6
 964:	0e 94 96 05 	call	0xb2c	; 0xb2c <__ultoa_invert>
 968:	88 2e       	mov	r8, r24
 96a:	86 18       	sub	r8, r6
 96c:	fb 2d       	mov	r31, r11
 96e:	ff 77       	andi	r31, 0x7F	; 127
 970:	3f 2e       	mov	r3, r31
 972:	36 fe       	sbrs	r3, 6
 974:	0d c0       	rjmp	.+26     	; 0x990 <__stack+0x91>
 976:	23 2d       	mov	r18, r3
 978:	2e 7f       	andi	r18, 0xFE	; 254
 97a:	a2 2e       	mov	r10, r18
 97c:	89 14       	cp	r8, r9
 97e:	58 f4       	brcc	.+22     	; 0x996 <__stack+0x97>
 980:	34 fe       	sbrs	r3, 4
 982:	0b c0       	rjmp	.+22     	; 0x99a <__stack+0x9b>
 984:	32 fc       	sbrc	r3, 2
 986:	09 c0       	rjmp	.+18     	; 0x99a <__stack+0x9b>
 988:	83 2d       	mov	r24, r3
 98a:	8e 7e       	andi	r24, 0xEE	; 238
 98c:	a8 2e       	mov	r10, r24
 98e:	05 c0       	rjmp	.+10     	; 0x99a <__stack+0x9b>
 990:	b8 2c       	mov	r11, r8
 992:	a3 2c       	mov	r10, r3
 994:	03 c0       	rjmp	.+6      	; 0x99c <__stack+0x9d>
 996:	b8 2c       	mov	r11, r8
 998:	01 c0       	rjmp	.+2      	; 0x99c <__stack+0x9d>
 99a:	b9 2c       	mov	r11, r9
 99c:	a4 fe       	sbrs	r10, 4
 99e:	0f c0       	rjmp	.+30     	; 0x9be <__stack+0xbf>
 9a0:	fe 01       	movw	r30, r28
 9a2:	e8 0d       	add	r30, r8
 9a4:	f1 1d       	adc	r31, r1
 9a6:	80 81       	ld	r24, Z
 9a8:	80 33       	cpi	r24, 0x30	; 48
 9aa:	21 f4       	brne	.+8      	; 0x9b4 <__stack+0xb5>
 9ac:	9a 2d       	mov	r25, r10
 9ae:	99 7e       	andi	r25, 0xE9	; 233
 9b0:	a9 2e       	mov	r10, r25
 9b2:	09 c0       	rjmp	.+18     	; 0x9c6 <__stack+0xc7>
 9b4:	a2 fe       	sbrs	r10, 2
 9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <__stack+0xc5>
 9b8:	b3 94       	inc	r11
 9ba:	b3 94       	inc	r11
 9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <__stack+0xc7>
 9be:	8a 2d       	mov	r24, r10
 9c0:	86 78       	andi	r24, 0x86	; 134
 9c2:	09 f0       	breq	.+2      	; 0x9c6 <__stack+0xc7>
 9c4:	b3 94       	inc	r11
 9c6:	a3 fc       	sbrc	r10, 3
 9c8:	11 c0       	rjmp	.+34     	; 0x9ec <__stack+0xed>
 9ca:	a0 fe       	sbrs	r10, 0
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <__stack+0xdb>
 9ce:	b2 14       	cp	r11, r2
 9d0:	88 f4       	brcc	.+34     	; 0x9f4 <__stack+0xf5>
 9d2:	28 0c       	add	r2, r8
 9d4:	92 2c       	mov	r9, r2
 9d6:	9b 18       	sub	r9, r11
 9d8:	0e c0       	rjmp	.+28     	; 0x9f6 <__stack+0xf7>
 9da:	b2 14       	cp	r11, r2
 9dc:	60 f4       	brcc	.+24     	; 0x9f6 <__stack+0xf7>
 9de:	b6 01       	movw	r22, r12
 9e0:	80 e2       	ldi	r24, 0x20	; 32
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	0e 94 5a 05 	call	0xab4	; 0xab4 <fputc>
 9e8:	b3 94       	inc	r11
 9ea:	f7 cf       	rjmp	.-18     	; 0x9da <__stack+0xdb>
 9ec:	b2 14       	cp	r11, r2
 9ee:	18 f4       	brcc	.+6      	; 0x9f6 <__stack+0xf7>
 9f0:	2b 18       	sub	r2, r11
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <__stack+0xf9>
 9f4:	98 2c       	mov	r9, r8
 9f6:	21 2c       	mov	r2, r1
 9f8:	a4 fe       	sbrs	r10, 4
 9fa:	10 c0       	rjmp	.+32     	; 0xa1c <__stack+0x11d>
 9fc:	b6 01       	movw	r22, r12
 9fe:	80 e3       	ldi	r24, 0x30	; 48
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 5a 05 	call	0xab4	; 0xab4 <fputc>
 a06:	a2 fe       	sbrs	r10, 2
 a08:	17 c0       	rjmp	.+46     	; 0xa38 <__stack+0x139>
 a0a:	a1 fc       	sbrc	r10, 1
 a0c:	03 c0       	rjmp	.+6      	; 0xa14 <__stack+0x115>
 a0e:	88 e7       	ldi	r24, 0x78	; 120
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <__stack+0x119>
 a14:	88 e5       	ldi	r24, 0x58	; 88
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	b6 01       	movw	r22, r12
 a1a:	0c c0       	rjmp	.+24     	; 0xa34 <__stack+0x135>
 a1c:	8a 2d       	mov	r24, r10
 a1e:	86 78       	andi	r24, 0x86	; 134
 a20:	59 f0       	breq	.+22     	; 0xa38 <__stack+0x139>
 a22:	a1 fe       	sbrs	r10, 1
 a24:	02 c0       	rjmp	.+4      	; 0xa2a <__stack+0x12b>
 a26:	8b e2       	ldi	r24, 0x2B	; 43
 a28:	01 c0       	rjmp	.+2      	; 0xa2c <__stack+0x12d>
 a2a:	80 e2       	ldi	r24, 0x20	; 32
 a2c:	a7 fc       	sbrc	r10, 7
 a2e:	8d e2       	ldi	r24, 0x2D	; 45
 a30:	b6 01       	movw	r22, r12
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	0e 94 5a 05 	call	0xab4	; 0xab4 <fputc>
 a38:	89 14       	cp	r8, r9
 a3a:	38 f4       	brcc	.+14     	; 0xa4a <__stack+0x14b>
 a3c:	b6 01       	movw	r22, r12
 a3e:	80 e3       	ldi	r24, 0x30	; 48
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 5a 05 	call	0xab4	; 0xab4 <fputc>
 a46:	9a 94       	dec	r9
 a48:	f7 cf       	rjmp	.-18     	; 0xa38 <__stack+0x139>
 a4a:	8a 94       	dec	r8
 a4c:	f3 01       	movw	r30, r6
 a4e:	e8 0d       	add	r30, r8
 a50:	f1 1d       	adc	r31, r1
 a52:	80 81       	ld	r24, Z
 a54:	b6 01       	movw	r22, r12
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 5a 05 	call	0xab4	; 0xab4 <fputc>
 a5c:	81 10       	cpse	r8, r1
 a5e:	f5 cf       	rjmp	.-22     	; 0xa4a <__stack+0x14b>
 a60:	22 20       	and	r2, r2
 a62:	09 f4       	brne	.+2      	; 0xa66 <__stack+0x167>
 a64:	42 ce       	rjmp	.-892    	; 0x6ea <vfprintf+0x24>
 a66:	b6 01       	movw	r22, r12
 a68:	80 e2       	ldi	r24, 0x20	; 32
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 94 5a 05 	call	0xab4	; 0xab4 <fputc>
 a70:	2a 94       	dec	r2
 a72:	f6 cf       	rjmp	.-20     	; 0xa60 <__stack+0x161>
 a74:	f6 01       	movw	r30, r12
 a76:	86 81       	ldd	r24, Z+6	; 0x06
 a78:	97 81       	ldd	r25, Z+7	; 0x07
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <__stack+0x181>
 a7c:	8f ef       	ldi	r24, 0xFF	; 255
 a7e:	9f ef       	ldi	r25, 0xFF	; 255
 a80:	2b 96       	adiw	r28, 0x0b	; 11
 a82:	e2 e1       	ldi	r30, 0x12	; 18
 a84:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__epilogue_restores__>

00000a88 <strnlen_P>:
 a88:	fc 01       	movw	r30, r24
 a8a:	05 90       	lpm	r0, Z+
 a8c:	61 50       	subi	r22, 0x01	; 1
 a8e:	70 40       	sbci	r23, 0x00	; 0
 a90:	01 10       	cpse	r0, r1
 a92:	d8 f7       	brcc	.-10     	; 0xa8a <strnlen_P+0x2>
 a94:	80 95       	com	r24
 a96:	90 95       	com	r25
 a98:	8e 0f       	add	r24, r30
 a9a:	9f 1f       	adc	r25, r31
 a9c:	08 95       	ret

00000a9e <strnlen>:
 a9e:	fc 01       	movw	r30, r24
 aa0:	61 50       	subi	r22, 0x01	; 1
 aa2:	70 40       	sbci	r23, 0x00	; 0
 aa4:	01 90       	ld	r0, Z+
 aa6:	01 10       	cpse	r0, r1
 aa8:	d8 f7       	brcc	.-10     	; 0xaa0 <strnlen+0x2>
 aaa:	80 95       	com	r24
 aac:	90 95       	com	r25
 aae:	8e 0f       	add	r24, r30
 ab0:	9f 1f       	adc	r25, r31
 ab2:	08 95       	ret

00000ab4 <fputc>:
 ab4:	0f 93       	push	r16
 ab6:	1f 93       	push	r17
 ab8:	cf 93       	push	r28
 aba:	df 93       	push	r29
 abc:	fb 01       	movw	r30, r22
 abe:	23 81       	ldd	r18, Z+3	; 0x03
 ac0:	21 fd       	sbrc	r18, 1
 ac2:	03 c0       	rjmp	.+6      	; 0xaca <fputc+0x16>
 ac4:	8f ef       	ldi	r24, 0xFF	; 255
 ac6:	9f ef       	ldi	r25, 0xFF	; 255
 ac8:	2c c0       	rjmp	.+88     	; 0xb22 <fputc+0x6e>
 aca:	22 ff       	sbrs	r18, 2
 acc:	16 c0       	rjmp	.+44     	; 0xafa <fputc+0x46>
 ace:	46 81       	ldd	r20, Z+6	; 0x06
 ad0:	57 81       	ldd	r21, Z+7	; 0x07
 ad2:	24 81       	ldd	r18, Z+4	; 0x04
 ad4:	35 81       	ldd	r19, Z+5	; 0x05
 ad6:	42 17       	cp	r20, r18
 ad8:	53 07       	cpc	r21, r19
 ada:	44 f4       	brge	.+16     	; 0xaec <fputc+0x38>
 adc:	a0 81       	ld	r26, Z
 ade:	b1 81       	ldd	r27, Z+1	; 0x01
 ae0:	9d 01       	movw	r18, r26
 ae2:	2f 5f       	subi	r18, 0xFF	; 255
 ae4:	3f 4f       	sbci	r19, 0xFF	; 255
 ae6:	31 83       	std	Z+1, r19	; 0x01
 ae8:	20 83       	st	Z, r18
 aea:	8c 93       	st	X, r24
 aec:	26 81       	ldd	r18, Z+6	; 0x06
 aee:	37 81       	ldd	r19, Z+7	; 0x07
 af0:	2f 5f       	subi	r18, 0xFF	; 255
 af2:	3f 4f       	sbci	r19, 0xFF	; 255
 af4:	37 83       	std	Z+7, r19	; 0x07
 af6:	26 83       	std	Z+6, r18	; 0x06
 af8:	14 c0       	rjmp	.+40     	; 0xb22 <fputc+0x6e>
 afa:	8b 01       	movw	r16, r22
 afc:	ec 01       	movw	r28, r24
 afe:	fb 01       	movw	r30, r22
 b00:	00 84       	ldd	r0, Z+8	; 0x08
 b02:	f1 85       	ldd	r31, Z+9	; 0x09
 b04:	e0 2d       	mov	r30, r0
 b06:	09 95       	icall
 b08:	89 2b       	or	r24, r25
 b0a:	e1 f6       	brne	.-72     	; 0xac4 <fputc+0x10>
 b0c:	d8 01       	movw	r26, r16
 b0e:	16 96       	adiw	r26, 0x06	; 6
 b10:	8d 91       	ld	r24, X+
 b12:	9c 91       	ld	r25, X
 b14:	17 97       	sbiw	r26, 0x07	; 7
 b16:	01 96       	adiw	r24, 0x01	; 1
 b18:	17 96       	adiw	r26, 0x07	; 7
 b1a:	9c 93       	st	X, r25
 b1c:	8e 93       	st	-X, r24
 b1e:	16 97       	sbiw	r26, 0x06	; 6
 b20:	ce 01       	movw	r24, r28
 b22:	df 91       	pop	r29
 b24:	cf 91       	pop	r28
 b26:	1f 91       	pop	r17
 b28:	0f 91       	pop	r16
 b2a:	08 95       	ret

00000b2c <__ultoa_invert>:
 b2c:	fa 01       	movw	r30, r20
 b2e:	aa 27       	eor	r26, r26
 b30:	28 30       	cpi	r18, 0x08	; 8
 b32:	51 f1       	breq	.+84     	; 0xb88 <__ultoa_invert+0x5c>
 b34:	20 31       	cpi	r18, 0x10	; 16
 b36:	81 f1       	breq	.+96     	; 0xb98 <__ultoa_invert+0x6c>
 b38:	e8 94       	clt
 b3a:	6f 93       	push	r22
 b3c:	6e 7f       	andi	r22, 0xFE	; 254
 b3e:	6e 5f       	subi	r22, 0xFE	; 254
 b40:	7f 4f       	sbci	r23, 0xFF	; 255
 b42:	8f 4f       	sbci	r24, 0xFF	; 255
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	af 4f       	sbci	r26, 0xFF	; 255
 b48:	b1 e0       	ldi	r27, 0x01	; 1
 b4a:	3e d0       	rcall	.+124    	; 0xbc8 <__ultoa_invert+0x9c>
 b4c:	b4 e0       	ldi	r27, 0x04	; 4
 b4e:	3c d0       	rcall	.+120    	; 0xbc8 <__ultoa_invert+0x9c>
 b50:	67 0f       	add	r22, r23
 b52:	78 1f       	adc	r23, r24
 b54:	89 1f       	adc	r24, r25
 b56:	9a 1f       	adc	r25, r26
 b58:	a1 1d       	adc	r26, r1
 b5a:	68 0f       	add	r22, r24
 b5c:	79 1f       	adc	r23, r25
 b5e:	8a 1f       	adc	r24, r26
 b60:	91 1d       	adc	r25, r1
 b62:	a1 1d       	adc	r26, r1
 b64:	6a 0f       	add	r22, r26
 b66:	71 1d       	adc	r23, r1
 b68:	81 1d       	adc	r24, r1
 b6a:	91 1d       	adc	r25, r1
 b6c:	a1 1d       	adc	r26, r1
 b6e:	20 d0       	rcall	.+64     	; 0xbb0 <__ultoa_invert+0x84>
 b70:	09 f4       	brne	.+2      	; 0xb74 <__ultoa_invert+0x48>
 b72:	68 94       	set
 b74:	3f 91       	pop	r19
 b76:	2a e0       	ldi	r18, 0x0A	; 10
 b78:	26 9f       	mul	r18, r22
 b7a:	11 24       	eor	r1, r1
 b7c:	30 19       	sub	r19, r0
 b7e:	30 5d       	subi	r19, 0xD0	; 208
 b80:	31 93       	st	Z+, r19
 b82:	de f6       	brtc	.-74     	; 0xb3a <__ultoa_invert+0xe>
 b84:	cf 01       	movw	r24, r30
 b86:	08 95       	ret
 b88:	46 2f       	mov	r20, r22
 b8a:	47 70       	andi	r20, 0x07	; 7
 b8c:	40 5d       	subi	r20, 0xD0	; 208
 b8e:	41 93       	st	Z+, r20
 b90:	b3 e0       	ldi	r27, 0x03	; 3
 b92:	0f d0       	rcall	.+30     	; 0xbb2 <__ultoa_invert+0x86>
 b94:	c9 f7       	brne	.-14     	; 0xb88 <__ultoa_invert+0x5c>
 b96:	f6 cf       	rjmp	.-20     	; 0xb84 <__ultoa_invert+0x58>
 b98:	46 2f       	mov	r20, r22
 b9a:	4f 70       	andi	r20, 0x0F	; 15
 b9c:	40 5d       	subi	r20, 0xD0	; 208
 b9e:	4a 33       	cpi	r20, 0x3A	; 58
 ba0:	18 f0       	brcs	.+6      	; 0xba8 <__ultoa_invert+0x7c>
 ba2:	49 5d       	subi	r20, 0xD9	; 217
 ba4:	31 fd       	sbrc	r19, 1
 ba6:	40 52       	subi	r20, 0x20	; 32
 ba8:	41 93       	st	Z+, r20
 baa:	02 d0       	rcall	.+4      	; 0xbb0 <__ultoa_invert+0x84>
 bac:	a9 f7       	brne	.-22     	; 0xb98 <__ultoa_invert+0x6c>
 bae:	ea cf       	rjmp	.-44     	; 0xb84 <__ultoa_invert+0x58>
 bb0:	b4 e0       	ldi	r27, 0x04	; 4
 bb2:	a6 95       	lsr	r26
 bb4:	97 95       	ror	r25
 bb6:	87 95       	ror	r24
 bb8:	77 95       	ror	r23
 bba:	67 95       	ror	r22
 bbc:	ba 95       	dec	r27
 bbe:	c9 f7       	brne	.-14     	; 0xbb2 <__ultoa_invert+0x86>
 bc0:	00 97       	sbiw	r24, 0x00	; 0
 bc2:	61 05       	cpc	r22, r1
 bc4:	71 05       	cpc	r23, r1
 bc6:	08 95       	ret
 bc8:	9b 01       	movw	r18, r22
 bca:	ac 01       	movw	r20, r24
 bcc:	0a 2e       	mov	r0, r26
 bce:	06 94       	lsr	r0
 bd0:	57 95       	ror	r21
 bd2:	47 95       	ror	r20
 bd4:	37 95       	ror	r19
 bd6:	27 95       	ror	r18
 bd8:	ba 95       	dec	r27
 bda:	c9 f7       	brne	.-14     	; 0xbce <__ultoa_invert+0xa2>
 bdc:	62 0f       	add	r22, r18
 bde:	73 1f       	adc	r23, r19
 be0:	84 1f       	adc	r24, r20
 be2:	95 1f       	adc	r25, r21
 be4:	a0 1d       	adc	r26, r0
 be6:	08 95       	ret

00000be8 <__prologue_saves__>:
 be8:	2f 92       	push	r2
 bea:	3f 92       	push	r3
 bec:	4f 92       	push	r4
 bee:	5f 92       	push	r5
 bf0:	6f 92       	push	r6
 bf2:	7f 92       	push	r7
 bf4:	8f 92       	push	r8
 bf6:	9f 92       	push	r9
 bf8:	af 92       	push	r10
 bfa:	bf 92       	push	r11
 bfc:	cf 92       	push	r12
 bfe:	df 92       	push	r13
 c00:	ef 92       	push	r14
 c02:	ff 92       	push	r15
 c04:	0f 93       	push	r16
 c06:	1f 93       	push	r17
 c08:	cf 93       	push	r28
 c0a:	df 93       	push	r29
 c0c:	cd b7       	in	r28, 0x3d	; 61
 c0e:	de b7       	in	r29, 0x3e	; 62
 c10:	ca 1b       	sub	r28, r26
 c12:	db 0b       	sbc	r29, r27
 c14:	0f b6       	in	r0, 0x3f	; 63
 c16:	f8 94       	cli
 c18:	de bf       	out	0x3e, r29	; 62
 c1a:	0f be       	out	0x3f, r0	; 63
 c1c:	cd bf       	out	0x3d, r28	; 61
 c1e:	09 94       	ijmp

00000c20 <__epilogue_restores__>:
 c20:	2a 88       	ldd	r2, Y+18	; 0x12
 c22:	39 88       	ldd	r3, Y+17	; 0x11
 c24:	48 88       	ldd	r4, Y+16	; 0x10
 c26:	5f 84       	ldd	r5, Y+15	; 0x0f
 c28:	6e 84       	ldd	r6, Y+14	; 0x0e
 c2a:	7d 84       	ldd	r7, Y+13	; 0x0d
 c2c:	8c 84       	ldd	r8, Y+12	; 0x0c
 c2e:	9b 84       	ldd	r9, Y+11	; 0x0b
 c30:	aa 84       	ldd	r10, Y+10	; 0x0a
 c32:	b9 84       	ldd	r11, Y+9	; 0x09
 c34:	c8 84       	ldd	r12, Y+8	; 0x08
 c36:	df 80       	ldd	r13, Y+7	; 0x07
 c38:	ee 80       	ldd	r14, Y+6	; 0x06
 c3a:	fd 80       	ldd	r15, Y+5	; 0x05
 c3c:	0c 81       	ldd	r16, Y+4	; 0x04
 c3e:	1b 81       	ldd	r17, Y+3	; 0x03
 c40:	aa 81       	ldd	r26, Y+2	; 0x02
 c42:	b9 81       	ldd	r27, Y+1	; 0x01
 c44:	ce 0f       	add	r28, r30
 c46:	d1 1d       	adc	r29, r1
 c48:	0f b6       	in	r0, 0x3f	; 63
 c4a:	f8 94       	cli
 c4c:	de bf       	out	0x3e, r29	; 62
 c4e:	0f be       	out	0x3f, r0	; 63
 c50:	cd bf       	out	0x3d, r28	; 61
 c52:	ed 01       	movw	r28, r26
 c54:	08 95       	ret

00000c56 <_exit>:
 c56:	f8 94       	cli

00000c58 <__stop_program>:
 c58:	ff cf       	rjmp	.-2      	; 0xc58 <__stop_program>
