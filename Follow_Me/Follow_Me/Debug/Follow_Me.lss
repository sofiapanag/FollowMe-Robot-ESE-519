
Follow_Me.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000bb8  00000c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080010e  0080010e  00000c5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a83  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  0000180b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000648  00000000  00000000  00001fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048f  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021d  00000000  00000000  00002c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cc 01 	call	0x398	; 0x398 <main>
  9e:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <intialize_PWM>:
//int previous, current, duration, distance;
int IRleft, IRright, DirRight, DirLeft;

void intialize_PWM()
{
	cli();                  // disable global interrupts
  a6:	f8 94       	cli
    DDRD |= (1 << DDD3);      // set pin D3 as output (OC2B)
  a8:	8a b1       	in	r24, 0x0a	; 10
  aa:	88 60       	ori	r24, 0x08	; 8
  ac:	8a b9       	out	0x0a, r24	; 10
	
    // set timer prescaler to 1024
    TCCR2B |= (1 << CS20);
  ae:	a1 eb       	ldi	r26, 0xB1	; 177
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	8c 91       	ld	r24, X
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	8c 93       	st	X, r24
    TCCR2B |= (1 << CS21);
  b8:	8c 91       	ld	r24, X
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	8c 93       	st	X, r24
    TCCR2B |= (1 << CS22);
  be:	8c 91       	ld	r24, X
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	8c 93       	st	X, r24
	
    // set timer mode to Fast PWM counting up to TOP
    TCCR2A |= (1 << WGM20);
  c4:	e0 eb       	ldi	r30, 0xB0	; 176
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	80 83       	st	Z, r24
    TCCR2A |= (1 << WGM21);
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
    TCCR2B &= ~(1 << WGM22);
  d4:	8c 91       	ld	r24, X
  d6:	87 7f       	andi	r24, 0xF7	; 247
  d8:	8c 93       	st	X, r24
	
    // clear OC2B on compare match, set OC2B at Bottom
    TCCR2A &= ~(1 << COM2B0);
  da:	80 81       	ld	r24, Z
  dc:	8f 7e       	andi	r24, 0xEF	; 239
  de:	80 83       	st	Z, r24
    TCCR2A |= (1 << COM2B1);
  e0:	80 81       	ld	r24, Z
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	80 83       	st	Z, r24
	
    OCR2A = 195;    // freq of 20Hz for the motors, OCR0A=16MHz/(4*1024*20)
  e6:	83 ec       	ldi	r24, 0xC3	; 195
  e8:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
    OCR2B = 0x7F;    // duty cycle (speed)
  ec:	8f e7       	ldi	r24, 0x7F	; 127
  ee:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
	
	sei();                  // enable global interrupts
  f2:	78 94       	sei
  f4:	08 95       	ret

000000f6 <initialize>:
}


void initialize() {
    cli();                  // disable global interrupts
  f6:	f8 94       	cli
    //INPUT OF ARDUINO: ULTRASONIC
    // initialize ultrasonic ports
    DDRD |= (1<<DDD7);      // set pin D7 as output
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	8a b9       	out	0x0a, r24	; 10
    DDRB &= ~(1<<DDB0);     // set pin B0 as input (input capture timer 1)
  fe:	84 b1       	in	r24, 0x04	; 4
 100:	8e 7f       	andi	r24, 0xFE	; 254
 102:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PORTB0);   // enable internal pull up resistor
 104:	85 b1       	in	r24, 0x05	; 5
 106:	81 60       	ori	r24, 0x01	; 1
 108:	85 b9       	out	0x05, r24	; 5

    // initialize ultrasonic timer 1
    TCCR1B &= ~(1<<CS10);   // set timer prescaler to 8
 10a:	e1 e8       	ldi	r30, 0x81	; 129
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	80 83       	st	Z, r24
    TCCR1B |= (1<<CS11);
 114:	80 81       	ld	r24, Z
 116:	82 60       	ori	r24, 0x02	; 2
 118:	80 83       	st	Z, r24
    TCCR1B &= ~(1<<CS12);
 11a:	80 81       	ld	r24, Z
 11c:	8b 7f       	andi	r24, 0xFB	; 251
 11e:	80 83       	st	Z, r24
    // input capture configurations
    TIMSK1 |= (1<<ICIE1);   // enable input capture interrupt
 120:	af e6       	ldi	r26, 0x6F	; 111
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	8c 91       	ld	r24, X
 126:	80 62       	ori	r24, 0x20	; 32
 128:	8c 93       	st	X, r24
    TCCR1B |= (1<<ICES1);   // detecting rising edge
 12a:	80 81       	ld	r24, Z
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	80 83       	st	Z, r24
    TIFR1 |= (1<<ICF1);     // clear input capture flag
 130:	86 b3       	in	r24, 0x16	; 22
 132:	80 62       	ori	r24, 0x20	; 32
 134:	86 bb       	out	0x16, r24	; 22

    //OUTPUT OF ARDUINO: LEFT MOTORS
    DDRD |= (1 << DDD5);      // set pin D5 as output (OC0B)
 136:	8a b1       	in	r24, 0x0a	; 10
 138:	80 62       	ori	r24, 0x20	; 32
 13a:	8a b9       	out	0x0a, r24	; 10
    // set timer prescaler to 1024
    TCCR0B |= (1 << CS00);
 13c:	85 b5       	in	r24, 0x25	; 37
 13e:	81 60       	ori	r24, 0x01	; 1
 140:	85 bd       	out	0x25, r24	; 37
    TCCR0B &= ~(1 << CS01);
 142:	85 b5       	in	r24, 0x25	; 37
 144:	8d 7f       	andi	r24, 0xFD	; 253
 146:	85 bd       	out	0x25, r24	; 37
    TCCR0B |= (1 << CS02);
 148:	85 b5       	in	r24, 0x25	; 37
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	85 bd       	out	0x25, r24	; 37
    
	// set timer mode to Fast PWM counting up to TOP
    TCCR0A |= (1 << WGM00);
 14e:	84 b5       	in	r24, 0x24	; 36
 150:	81 60       	ori	r24, 0x01	; 1
 152:	84 bd       	out	0x24, r24	; 36
    TCCR0A &= ~(1 << WGM01);
 154:	84 b5       	in	r24, 0x24	; 36
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	84 bd       	out	0x24, r24	; 36
    TCCR0B &= ~(1 << WGM02);
 15a:	85 b5       	in	r24, 0x25	; 37
 15c:	87 7f       	andi	r24, 0xF7	; 247
 15e:	85 bd       	out	0x25, r24	; 37
	
    // clear OC0B on compare match, set OC0B at Bottom
    TCCR0A &= ~(1 << COM0B0);
 160:	84 b5       	in	r24, 0x24	; 36
 162:	8f 7e       	andi	r24, 0xEF	; 239
 164:	84 bd       	out	0x24, r24	; 36
    TCCR0A |= (1 << COM0B1);
 166:	84 b5       	in	r24, 0x24	; 36
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	84 bd       	out	0x24, r24	; 36
    OCR0A = 195;    // freq of 20Hz for the motors, OCR0A=16MHz/(4*1024*20)
 16c:	83 ec       	ldi	r24, 0xC3	; 195
 16e:	87 bd       	out	0x27, r24	; 39
    OCR0B = 0x7F;    // duty cycle (speed)
 170:	8f e7       	ldi	r24, 0x7F	; 127
 172:	88 bd       	out	0x28, r24	; 40
	
    sei();                  // enable global interrupts
 174:	78 94       	sei
 176:	08 95       	ret

00000178 <__vector_10>:
}

ISR(TIMER1_CAPT_vect) {     // ultrasonic
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	3f 93       	push	r19
 186:	4f 93       	push	r20
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	TIFR1 |= (1<<ICF1);     // clear input capture flag
 19a:	86 b3       	in	r24, 0x16	; 22
 19c:	80 62       	ori	r24, 0x20	; 32
 19e:	86 bb       	out	0x16, r24	; 22
	current = ICR1;
 1a0:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 1a4:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 1a8:	a0 e0       	ldi	r26, 0x00	; 0
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <current>
 1b0:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <current+0x1>
 1b4:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <current+0x2>
 1b8:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <current+0x3>
	if (!(TCCR1B & (1<<ICES1))) {   // if detecting falling edge
 1bc:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 1c0:	86 fd       	sbrc	r24, 6
 1c2:	79 c0       	rjmp	.+242    	; 0x2b6 <__vector_10+0x13e>
		if (current > previous) {
 1c4:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <current>
 1c8:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <current+0x1>
 1cc:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <current+0x2>
 1d0:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <current+0x3>
 1d4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <previous>
 1d8:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <previous+0x1>
 1dc:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <previous+0x2>
 1e0:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <previous+0x3>
 1e4:	84 17       	cp	r24, r20
 1e6:	95 07       	cpc	r25, r21
 1e8:	a6 07       	cpc	r26, r22
 1ea:	b7 07       	cpc	r27, r23
 1ec:	e0 f4       	brcc	.+56     	; 0x226 <__vector_10+0xae>
			duration = current - previous;
 1ee:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 1f2:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 1f6:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <current+0x2>
 1fa:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <current+0x3>
 1fe:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <previous>
 202:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <previous+0x1>
 206:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <previous+0x2>
 20a:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <previous+0x3>
 20e:	84 1b       	sub	r24, r20
 210:	95 0b       	sbc	r25, r21
 212:	a6 0b       	sbc	r26, r22
 214:	b7 0b       	sbc	r27, r23
 216:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <duration>
 21a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <duration+0x1>
 21e:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <duration+0x2>
 222:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <duration+0x3>
		}
		if (current < previous) {
 226:	40 91 16 01 	lds	r20, 0x0116	; 0x800116 <current>
 22a:	50 91 17 01 	lds	r21, 0x0117	; 0x800117 <current+0x1>
 22e:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <current+0x2>
 232:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <current+0x3>
 236:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <previous>
 23a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <previous+0x1>
 23e:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <previous+0x2>
 242:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <previous+0x3>
 246:	48 17       	cp	r20, r24
 248:	59 07       	cpc	r21, r25
 24a:	6a 07       	cpc	r22, r26
 24c:	7b 07       	cpc	r23, r27
 24e:	e8 f4       	brcc	.+58     	; 0x28a <__vector_10+0x112>
			duration = 65536 + current - previous;
 250:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 254:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 258:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <current+0x2>
 25c:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <current+0x3>
 260:	40 91 1a 01 	lds	r20, 0x011A	; 0x80011a <previous>
 264:	50 91 1b 01 	lds	r21, 0x011B	; 0x80011b <previous+0x1>
 268:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <previous+0x2>
 26c:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <previous+0x3>
 270:	84 1b       	sub	r24, r20
 272:	95 0b       	sbc	r25, r21
 274:	a6 0b       	sbc	r26, r22
 276:	b7 0b       	sbc	r27, r23
 278:	11 96       	adiw	r26, 0x01	; 1
 27a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <duration>
 27e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <duration+0x1>
 282:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <duration+0x2>
 286:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <duration+0x3>
		}
		distance = duration/(2*58); // in cm
 28a:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <duration>
 28e:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <duration+0x1>
 292:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <duration+0x2>
 296:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <duration+0x3>
 29a:	24 e7       	ldi	r18, 0x74	; 116
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	0e 94 ce 02 	call	0x59c	; 0x59c <__udivmodsi4>
 2a6:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <__data_end>
 2aa:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <__data_end+0x1>
 2ae:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <__data_end+0x2>
 2b2:	50 93 11 01 	sts	0x0111, r21	; 0x800111 <__data_end+0x3>
	}
	previous = current;
 2b6:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <current>
 2ba:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <current+0x1>
 2be:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <current+0x2>
 2c2:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <current+0x3>
 2c6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <previous>
 2ca:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <previous+0x1>
 2ce:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <previous+0x2>
 2d2:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <previous+0x3>
	TCCR1B ^= (1<<ICES1);   // toggle detecting edge
 2d6:	e1 e8       	ldi	r30, 0x81	; 129
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	90 81       	ld	r25, Z
 2dc:	80 e4       	ldi	r24, 0x40	; 64
 2de:	89 27       	eor	r24, r25
 2e0:	80 83       	st	Z, r24
}
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <GoForward>:



void GoForward () {
    DirLeft = 1;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <DirLeft+0x1>
 30c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DirLeft>
    DirRight = 1;
 310:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <DirRight+0x1>
 314:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <DirRight>
    OCR0B = 120;
 318:	88 e7       	ldi	r24, 0x78	; 120
 31a:	88 bd       	out	0x28, r24	; 40
    OCR2B = 120;
 31c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 320:	08 95       	ret

00000322 <GoBackward>:
}

void GoBackward() {
    DirLeft = 0;
 322:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <DirLeft+0x1>
 326:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <DirLeft>
    DirRight = 0;
 32a:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <DirRight+0x1>
 32e:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <DirRight>
    OCR0B = 120;
 332:	88 e7       	ldi	r24, 0x78	; 120
 334:	88 bd       	out	0x28, r24	; 40
    OCR2B = 120;
 336:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 33a:	08 95       	ret

0000033c <GoRight>:
}

void GoRight() {
    DirLeft = 1;    // motors 1,2
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <DirLeft+0x1>
 344:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DirLeft>
    DirRight = 0;   // motors 3,4
 348:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <DirRight+0x1>
 34c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <DirRight>
    OCR0B = 200;
 350:	88 ec       	ldi	r24, 0xC8	; 200
 352:	88 bd       	out	0x28, r24	; 40
    OCR2B = 100;
 354:	84 e6       	ldi	r24, 0x64	; 100
 356:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 35a:	08 95       	ret

0000035c <GoLeft>:
}

void GoLeft() {
    DirLeft = 0;
 35c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <DirLeft+0x1>
 360:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <DirLeft>
    DirRight = 1;
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <DirRight+0x1>
 36c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <DirRight>
    OCR0B = 100;
 370:	84 e6       	ldi	r24, 0x64	; 100
 372:	88 bd       	out	0x28, r24	; 40
    OCR2B = 200;
 374:	88 ec       	ldi	r24, 0xC8	; 200
 376:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 37a:	08 95       	ret

0000037c <Stop>:
}

void Stop() {
    DirLeft = 1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <DirLeft+0x1>
 384:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <DirLeft>
    DirRight = 1;
 388:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <DirRight+0x1>
 38c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <DirRight>
    OCR0B = 0;
 390:	18 bc       	out	0x28, r1	; 40
    OCR2B = 0;
 392:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 396:	08 95       	ret

00000398 <main>:
}

int main (void) {
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	69 97       	sbiw	r28, 0x19	; 25
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61
    const int  baud_rate = 9600;
	initialize_UART(baud_rate);
 3ac:	80 e8       	ldi	r24, 0x80	; 128
 3ae:	95 e2       	ldi	r25, 0x25	; 37
 3b0:	0e 94 8d 02 	call	0x51a	; 0x51a <initialize_UART>
	intialize_PWM();
 3b4:	0e 94 53 00 	call	0xa6	; 0xa6 <intialize_PWM>
	initialize();
 3b8:	0e 94 7b 00 	call	0xf6	; 0xf6 <initialize>
	
    while (1) {
        // ultrasonic trigger every 60ms
        PORTD |= (1<<PORTD7);
 3bc:	8b b1       	in	r24, 0x0b	; 11
 3be:	80 68       	ori	r24, 0x80	; 128
 3c0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c2:	8f e8       	ldi	r24, 0x8F	; 143
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <main+0x2e>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x34>
 3cc:	00 00       	nop
        _delay_ms(0.1);
        PORTD &= ~(1<<PORTD7);
 3ce:	8b b1       	in	r24, 0x0b	; 11
 3d0:	8f 77       	andi	r24, 0x7F	; 127
 3d2:	8b b9       	out	0x0b, r24	; 11
 3d4:	9f ef       	ldi	r25, 0xFF	; 255
 3d6:	ed ee       	ldi	r30, 0xED	; 237
 3d8:	f2 e0       	ldi	r31, 0x02	; 2
 3da:	91 50       	subi	r25, 0x01	; 1
 3dc:	e0 40       	sbci	r30, 0x00	; 0
 3de:	f0 40       	sbci	r31, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x42>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0x4c>
 3e4:	00 00       	nop
        _delay_ms(60);
		
		char buffer[25] = {'\0'};
 3e6:	8e 01       	movw	r16, r28
 3e8:	0f 5f       	subi	r16, 0xFF	; 255
 3ea:	1f 4f       	sbci	r17, 0xFF	; 255
 3ec:	89 e1       	ldi	r24, 0x19	; 25
 3ee:	f8 01       	movw	r30, r16
 3f0:	11 92       	st	Z+, r1
 3f2:	8a 95       	dec	r24
 3f4:	e9 f7       	brne	.-6      	; 0x3f0 <main+0x58>
		sprintf(buffer,"distance %ld\n", distance);
 3f6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 3fa:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 3fe:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end+0x2>
 402:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x3>
 406:	bf 93       	push	r27
 408:	af 93       	push	r26
 40a:	9f 93       	push	r25
 40c:	8f 93       	push	r24
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	91 e0       	ldi	r25, 0x01	; 1
 412:	9f 93       	push	r25
 414:	8f 93       	push	r24
 416:	1f 93       	push	r17
 418:	0f 93       	push	r16
 41a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <sprintf>
		putstring_UART(buffer);
 41e:	c8 01       	movw	r24, r16
 420:	0e 94 c1 02 	call	0x582	; 0x582 <putstring_UART>
		
        if ((IRright == 1) && (IRleft == 1) && (distance > 10) && (distance < 30)) {
 424:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <IRright>
 428:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <IRright+0x1>
 42c:	0f b6       	in	r0, 0x3f	; 63
 42e:	f8 94       	cli
 430:	de bf       	out	0x3e, r29	; 62
 432:	0f be       	out	0x3f, r0	; 63
 434:	cd bf       	out	0x3d, r28	; 61
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	91 05       	cpc	r25, r1
 43a:	21 f5       	brne	.+72     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 43c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <IRleft>
 440:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <IRleft+0x1>
 444:	21 30       	cpi	r18, 0x01	; 1
 446:	31 05       	cpc	r19, r1
 448:	e9 f4       	brne	.+58     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 44a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__data_end>
 44e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__data_end+0x1>
 452:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end+0x2>
 456:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x3>
 45a:	4b 30       	cpi	r20, 0x0B	; 11
 45c:	51 05       	cpc	r21, r1
 45e:	61 05       	cpc	r22, r1
 460:	71 05       	cpc	r23, r1
 462:	80 f0       	brcs	.+32     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 464:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__data_end>
 468:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__data_end+0x1>
 46c:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <__data_end+0x2>
 470:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <__data_end+0x3>
 474:	4e 31       	cpi	r20, 0x1E	; 30
 476:	51 05       	cpc	r21, r1
 478:	61 05       	cpc	r22, r1
 47a:	71 05       	cpc	r23, r1
 47c:	18 f4       	brcc	.+6      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
            GoForward();
 47e:	0e 94 82 01 	call	0x304	; 0x304 <GoForward>
 482:	9c cf       	rjmp	.-200    	; 0x3bc <main+0x24>
        }
        else if ((IRright == 1) && (IRleft == 0)) {
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	91 05       	cpc	r25, r1
 488:	49 f4       	brne	.+18     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 48a:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <IRleft>
 48e:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <IRleft+0x1>
 492:	23 2b       	or	r18, r19
 494:	19 f4       	brne	.+6      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
            GoLeft();
 496:	0e 94 ae 01 	call	0x35c	; 0x35c <GoLeft>
 49a:	90 cf       	rjmp	.-224    	; 0x3bc <main+0x24>
        }
        else if ((IRright == 0) && (IRleft == 1)) {
 49c:	00 97       	sbiw	r24, 0x00	; 0
 49e:	51 f4       	brne	.+20     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4a0:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <IRleft>
 4a4:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <IRleft+0x1>
 4a8:	21 30       	cpi	r18, 0x01	; 1
 4aa:	31 05       	cpc	r19, r1
 4ac:	19 f4       	brne	.+6      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
            GoRight();
 4ae:	0e 94 9e 01 	call	0x33c	; 0x33c <GoRight>
 4b2:	84 cf       	rjmp	.-248    	; 0x3bc <main+0x24>
        }
        else if (((IRright == 1) && (IRleft == 1)) || ((distance > 5) && (distance < 10))){
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	31 f4       	brne	.+12     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4b8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <IRleft>
 4bc:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <IRleft+0x1>
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	c1 f0       	breq	.+48     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4c4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 4c8:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 4cc:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end+0x2>
 4d0:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x3>
 4d4:	06 97       	sbiw	r24, 0x06	; 6
 4d6:	a1 05       	cpc	r26, r1
 4d8:	b1 05       	cpc	r27, r1
 4da:	78 f0       	brcs	.+30     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4dc:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 4e0:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 4e4:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end+0x2>
 4e8:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x3>
 4ec:	0a 97       	sbiw	r24, 0x0a	; 10
 4ee:	a1 05       	cpc	r26, r1
 4f0:	b1 05       	cpc	r27, r1
 4f2:	18 f4       	brcc	.+6      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
            Stop();
 4f4:	0e 94 be 01 	call	0x37c	; 0x37c <Stop>
 4f8:	61 cf       	rjmp	.-318    	; 0x3bc <main+0x24>
        }
        else if (distance < 5) {
 4fa:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 4fe:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 502:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end+0x2>
 506:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__data_end+0x3>
 50a:	05 97       	sbiw	r24, 0x05	; 5
 50c:	a1 05       	cpc	r26, r1
 50e:	b1 05       	cpc	r27, r1
 510:	08 f0       	brcs	.+2      	; 0x514 <__EEPROM_REGION_LENGTH__+0x114>
 512:	54 cf       	rjmp	.-344    	; 0x3bc <main+0x24>
            GoBackward();
 514:	0e 94 91 01 	call	0x322	; 0x322 <GoBackward>
        }
    }
 518:	51 cf       	rjmp	.-350    	; 0x3bc <main+0x24>

0000051a <initialize_UART>:

#define BUFFER_SIZE 1024

void initialize_UART(int baud_rate)
{
	int baud_prescaler = (F_CPU / (baud_rate * 16UL)) - 1; // see table 19.1 on datasheet
 51a:	09 2e       	mov	r0, r25
 51c:	00 0c       	add	r0, r0
 51e:	aa 0b       	sbc	r26, r26
 520:	bb 0b       	sbc	r27, r27
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	aa 1f       	adc	r26, r26
 528:	bb 1f       	adc	r27, r27
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	aa 1f       	adc	r26, r26
 530:	bb 1f       	adc	r27, r27
 532:	9c 01       	movw	r18, r24
 534:	ad 01       	movw	r20, r26
 536:	22 0f       	add	r18, r18
 538:	33 1f       	adc	r19, r19
 53a:	44 1f       	adc	r20, r20
 53c:	55 1f       	adc	r21, r21
 53e:	22 0f       	add	r18, r18
 540:	33 1f       	adc	r19, r19
 542:	44 1f       	adc	r20, r20
 544:	55 1f       	adc	r21, r21
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	74 e2       	ldi	r23, 0x24	; 36
 54a:	84 ef       	ldi	r24, 0xF4	; 244
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 ce 02 	call	0x59c	; 0x59c <__udivmodsi4>
 552:	21 50       	subi	r18, 0x01	; 1
 554:	31 09       	sbc	r19, r1
	// setting baud rate 9600 - UBRRn = 103
	UBRR0H = (unsigned char)(baud_prescaler>>8);
 556:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)baud_prescaler;
 55a:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// rx and tx
	UCSR0B = (1 << RXEN0) | (1 << TXEN0); // TX
 55e:	88 e1       	ldi	r24, 0x18	; 24
 560:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// 8 data bits
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 564:	e2 ec       	ldi	r30, 0xC2	; 194
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	86 e0       	ldi	r24, 0x06	; 6
 56a:	80 83       	st	Z, r24
	// 2 stop bits
	UCSR0C |= (1 << USBS0);
 56c:	80 81       	ld	r24, Z
 56e:	88 60       	ori	r24, 0x08	; 8
 570:	80 83       	st	Z, r24
 572:	08 95       	ret

00000574 <send_UART>:
}

void send_UART(unsigned char data)
{
	while(!(UCSR0A & (1 << UDRE0)));
 574:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 578:	95 ff       	sbrs	r25, 5
 57a:	fc cf       	rjmp	.-8      	; 0x574 <send_UART>
	UDR0 = data;
 57c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 580:	08 95       	ret

00000582 <putstring_UART>:
}

void putstring_UART(char *strptr)
{
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	ec 01       	movw	r28, r24
	while (*strptr)
 588:	03 c0       	rjmp	.+6      	; 0x590 <putstring_UART+0xe>
	{
		send_UART(*strptr);
 58a:	0e 94 ba 02 	call	0x574	; 0x574 <send_UART>
		strptr++;
 58e:	21 96       	adiw	r28, 0x01	; 1
	UDR0 = data;
}

void putstring_UART(char *strptr)
{
	while (*strptr)
 590:	88 81       	ld	r24, Y
 592:	81 11       	cpse	r24, r1
 594:	fa cf       	rjmp	.-12     	; 0x58a <putstring_UART+0x8>
	{
		send_UART(*strptr);
		strptr++;
	}
}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <__udivmodsi4>:
 59c:	a1 e2       	ldi	r26, 0x21	; 33
 59e:	1a 2e       	mov	r1, r26
 5a0:	aa 1b       	sub	r26, r26
 5a2:	bb 1b       	sub	r27, r27
 5a4:	fd 01       	movw	r30, r26
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <__udivmodsi4_ep>

000005a8 <__udivmodsi4_loop>:
 5a8:	aa 1f       	adc	r26, r26
 5aa:	bb 1f       	adc	r27, r27
 5ac:	ee 1f       	adc	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	a2 17       	cp	r26, r18
 5b2:	b3 07       	cpc	r27, r19
 5b4:	e4 07       	cpc	r30, r20
 5b6:	f5 07       	cpc	r31, r21
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__udivmodsi4_ep>
 5ba:	a2 1b       	sub	r26, r18
 5bc:	b3 0b       	sbc	r27, r19
 5be:	e4 0b       	sbc	r30, r20
 5c0:	f5 0b       	sbc	r31, r21

000005c2 <__udivmodsi4_ep>:
 5c2:	66 1f       	adc	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	1a 94       	dec	r1
 5cc:	69 f7       	brne	.-38     	; 0x5a8 <__udivmodsi4_loop>
 5ce:	60 95       	com	r22
 5d0:	70 95       	com	r23
 5d2:	80 95       	com	r24
 5d4:	90 95       	com	r25
 5d6:	9b 01       	movw	r18, r22
 5d8:	ac 01       	movw	r20, r24
 5da:	bd 01       	movw	r22, r26
 5dc:	cf 01       	movw	r24, r30
 5de:	08 95       	ret

000005e0 <sprintf>:
 5e0:	ae e0       	ldi	r26, 0x0E	; 14
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	e6 ef       	ldi	r30, 0xF6	; 246
 5e6:	f2 e0       	ldi	r31, 0x02	; 2
 5e8:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__prologue_saves__+0x1c>
 5ec:	0d 89       	ldd	r16, Y+21	; 0x15
 5ee:	1e 89       	ldd	r17, Y+22	; 0x16
 5f0:	86 e0       	ldi	r24, 0x06	; 6
 5f2:	8c 83       	std	Y+4, r24	; 0x04
 5f4:	1a 83       	std	Y+2, r17	; 0x02
 5f6:	09 83       	std	Y+1, r16	; 0x01
 5f8:	8f ef       	ldi	r24, 0xFF	; 255
 5fa:	9f e7       	ldi	r25, 0x7F	; 127
 5fc:	9e 83       	std	Y+6, r25	; 0x06
 5fe:	8d 83       	std	Y+5, r24	; 0x05
 600:	ae 01       	movw	r20, r28
 602:	47 5e       	subi	r20, 0xE7	; 231
 604:	5f 4f       	sbci	r21, 0xFF	; 255
 606:	6f 89       	ldd	r22, Y+23	; 0x17
 608:	78 8d       	ldd	r23, Y+24	; 0x18
 60a:	ce 01       	movw	r24, r28
 60c:	01 96       	adiw	r24, 0x01	; 1
 60e:	0e 94 12 03 	call	0x624	; 0x624 <vfprintf>
 612:	ef 81       	ldd	r30, Y+7	; 0x07
 614:	f8 85       	ldd	r31, Y+8	; 0x08
 616:	e0 0f       	add	r30, r16
 618:	f1 1f       	adc	r31, r17
 61a:	10 82       	st	Z, r1
 61c:	2e 96       	adiw	r28, 0x0e	; 14
 61e:	e4 e0       	ldi	r30, 0x04	; 4
 620:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__epilogue_restores__+0x1c>

00000624 <vfprintf>:
 624:	ab e0       	ldi	r26, 0x0B	; 11
 626:	b0 e0       	ldi	r27, 0x00	; 0
 628:	e8 e1       	ldi	r30, 0x18	; 24
 62a:	f3 e0       	ldi	r31, 0x03	; 3
 62c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__prologue_saves__>
 630:	6c 01       	movw	r12, r24
 632:	7b 01       	movw	r14, r22
 634:	8a 01       	movw	r16, r20
 636:	fc 01       	movw	r30, r24
 638:	17 82       	std	Z+7, r1	; 0x07
 63a:	16 82       	std	Z+6, r1	; 0x06
 63c:	83 81       	ldd	r24, Z+3	; 0x03
 63e:	81 ff       	sbrs	r24, 1
 640:	cc c1       	rjmp	.+920    	; 0x9da <__stack+0xdb>
 642:	ce 01       	movw	r24, r28
 644:	01 96       	adiw	r24, 0x01	; 1
 646:	3c 01       	movw	r6, r24
 648:	f6 01       	movw	r30, r12
 64a:	93 81       	ldd	r25, Z+3	; 0x03
 64c:	f7 01       	movw	r30, r14
 64e:	93 fd       	sbrc	r25, 3
 650:	85 91       	lpm	r24, Z+
 652:	93 ff       	sbrs	r25, 3
 654:	81 91       	ld	r24, Z+
 656:	7f 01       	movw	r14, r30
 658:	88 23       	and	r24, r24
 65a:	09 f4       	brne	.+2      	; 0x65e <vfprintf+0x3a>
 65c:	ba c1       	rjmp	.+884    	; 0x9d2 <__stack+0xd3>
 65e:	85 32       	cpi	r24, 0x25	; 37
 660:	39 f4       	brne	.+14     	; 0x670 <vfprintf+0x4c>
 662:	93 fd       	sbrc	r25, 3
 664:	85 91       	lpm	r24, Z+
 666:	93 ff       	sbrs	r25, 3
 668:	81 91       	ld	r24, Z+
 66a:	7f 01       	movw	r14, r30
 66c:	85 32       	cpi	r24, 0x25	; 37
 66e:	29 f4       	brne	.+10     	; 0x67a <vfprintf+0x56>
 670:	b6 01       	movw	r22, r12
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 09 05 	call	0xa12	; 0xa12 <fputc>
 678:	e7 cf       	rjmp	.-50     	; 0x648 <vfprintf+0x24>
 67a:	91 2c       	mov	r9, r1
 67c:	21 2c       	mov	r2, r1
 67e:	31 2c       	mov	r3, r1
 680:	ff e1       	ldi	r31, 0x1F	; 31
 682:	f3 15       	cp	r31, r3
 684:	d8 f0       	brcs	.+54     	; 0x6bc <vfprintf+0x98>
 686:	8b 32       	cpi	r24, 0x2B	; 43
 688:	79 f0       	breq	.+30     	; 0x6a8 <vfprintf+0x84>
 68a:	38 f4       	brcc	.+14     	; 0x69a <vfprintf+0x76>
 68c:	80 32       	cpi	r24, 0x20	; 32
 68e:	79 f0       	breq	.+30     	; 0x6ae <vfprintf+0x8a>
 690:	83 32       	cpi	r24, 0x23	; 35
 692:	a1 f4       	brne	.+40     	; 0x6bc <vfprintf+0x98>
 694:	23 2d       	mov	r18, r3
 696:	20 61       	ori	r18, 0x10	; 16
 698:	1d c0       	rjmp	.+58     	; 0x6d4 <vfprintf+0xb0>
 69a:	8d 32       	cpi	r24, 0x2D	; 45
 69c:	61 f0       	breq	.+24     	; 0x6b6 <vfprintf+0x92>
 69e:	80 33       	cpi	r24, 0x30	; 48
 6a0:	69 f4       	brne	.+26     	; 0x6bc <vfprintf+0x98>
 6a2:	23 2d       	mov	r18, r3
 6a4:	21 60       	ori	r18, 0x01	; 1
 6a6:	16 c0       	rjmp	.+44     	; 0x6d4 <vfprintf+0xb0>
 6a8:	83 2d       	mov	r24, r3
 6aa:	82 60       	ori	r24, 0x02	; 2
 6ac:	38 2e       	mov	r3, r24
 6ae:	e3 2d       	mov	r30, r3
 6b0:	e4 60       	ori	r30, 0x04	; 4
 6b2:	3e 2e       	mov	r3, r30
 6b4:	2a c0       	rjmp	.+84     	; 0x70a <vfprintf+0xe6>
 6b6:	f3 2d       	mov	r31, r3
 6b8:	f8 60       	ori	r31, 0x08	; 8
 6ba:	1d c0       	rjmp	.+58     	; 0x6f6 <vfprintf+0xd2>
 6bc:	37 fc       	sbrc	r3, 7
 6be:	2d c0       	rjmp	.+90     	; 0x71a <vfprintf+0xf6>
 6c0:	20 ed       	ldi	r18, 0xD0	; 208
 6c2:	28 0f       	add	r18, r24
 6c4:	2a 30       	cpi	r18, 0x0A	; 10
 6c6:	40 f0       	brcs	.+16     	; 0x6d8 <vfprintf+0xb4>
 6c8:	8e 32       	cpi	r24, 0x2E	; 46
 6ca:	b9 f4       	brne	.+46     	; 0x6fa <vfprintf+0xd6>
 6cc:	36 fc       	sbrc	r3, 6
 6ce:	81 c1       	rjmp	.+770    	; 0x9d2 <__stack+0xd3>
 6d0:	23 2d       	mov	r18, r3
 6d2:	20 64       	ori	r18, 0x40	; 64
 6d4:	32 2e       	mov	r3, r18
 6d6:	19 c0       	rjmp	.+50     	; 0x70a <vfprintf+0xe6>
 6d8:	36 fe       	sbrs	r3, 6
 6da:	06 c0       	rjmp	.+12     	; 0x6e8 <vfprintf+0xc4>
 6dc:	8a e0       	ldi	r24, 0x0A	; 10
 6de:	98 9e       	mul	r9, r24
 6e0:	20 0d       	add	r18, r0
 6e2:	11 24       	eor	r1, r1
 6e4:	92 2e       	mov	r9, r18
 6e6:	11 c0       	rjmp	.+34     	; 0x70a <vfprintf+0xe6>
 6e8:	ea e0       	ldi	r30, 0x0A	; 10
 6ea:	2e 9e       	mul	r2, r30
 6ec:	20 0d       	add	r18, r0
 6ee:	11 24       	eor	r1, r1
 6f0:	22 2e       	mov	r2, r18
 6f2:	f3 2d       	mov	r31, r3
 6f4:	f0 62       	ori	r31, 0x20	; 32
 6f6:	3f 2e       	mov	r3, r31
 6f8:	08 c0       	rjmp	.+16     	; 0x70a <vfprintf+0xe6>
 6fa:	8c 36       	cpi	r24, 0x6C	; 108
 6fc:	21 f4       	brne	.+8      	; 0x706 <vfprintf+0xe2>
 6fe:	83 2d       	mov	r24, r3
 700:	80 68       	ori	r24, 0x80	; 128
 702:	38 2e       	mov	r3, r24
 704:	02 c0       	rjmp	.+4      	; 0x70a <vfprintf+0xe6>
 706:	88 36       	cpi	r24, 0x68	; 104
 708:	41 f4       	brne	.+16     	; 0x71a <vfprintf+0xf6>
 70a:	f7 01       	movw	r30, r14
 70c:	93 fd       	sbrc	r25, 3
 70e:	85 91       	lpm	r24, Z+
 710:	93 ff       	sbrs	r25, 3
 712:	81 91       	ld	r24, Z+
 714:	7f 01       	movw	r14, r30
 716:	81 11       	cpse	r24, r1
 718:	b3 cf       	rjmp	.-154    	; 0x680 <vfprintf+0x5c>
 71a:	98 2f       	mov	r25, r24
 71c:	9f 7d       	andi	r25, 0xDF	; 223
 71e:	95 54       	subi	r25, 0x45	; 69
 720:	93 30       	cpi	r25, 0x03	; 3
 722:	28 f4       	brcc	.+10     	; 0x72e <vfprintf+0x10a>
 724:	0c 5f       	subi	r16, 0xFC	; 252
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	9f e3       	ldi	r25, 0x3F	; 63
 72a:	99 83       	std	Y+1, r25	; 0x01
 72c:	0d c0       	rjmp	.+26     	; 0x748 <vfprintf+0x124>
 72e:	83 36       	cpi	r24, 0x63	; 99
 730:	31 f0       	breq	.+12     	; 0x73e <vfprintf+0x11a>
 732:	83 37       	cpi	r24, 0x73	; 115
 734:	71 f0       	breq	.+28     	; 0x752 <vfprintf+0x12e>
 736:	83 35       	cpi	r24, 0x53	; 83
 738:	09 f0       	breq	.+2      	; 0x73c <vfprintf+0x118>
 73a:	59 c0       	rjmp	.+178    	; 0x7ee <vfprintf+0x1ca>
 73c:	21 c0       	rjmp	.+66     	; 0x780 <vfprintf+0x15c>
 73e:	f8 01       	movw	r30, r16
 740:	80 81       	ld	r24, Z
 742:	89 83       	std	Y+1, r24	; 0x01
 744:	0e 5f       	subi	r16, 0xFE	; 254
 746:	1f 4f       	sbci	r17, 0xFF	; 255
 748:	88 24       	eor	r8, r8
 74a:	83 94       	inc	r8
 74c:	91 2c       	mov	r9, r1
 74e:	53 01       	movw	r10, r6
 750:	13 c0       	rjmp	.+38     	; 0x778 <vfprintf+0x154>
 752:	28 01       	movw	r4, r16
 754:	f2 e0       	ldi	r31, 0x02	; 2
 756:	4f 0e       	add	r4, r31
 758:	51 1c       	adc	r5, r1
 75a:	f8 01       	movw	r30, r16
 75c:	a0 80       	ld	r10, Z
 75e:	b1 80       	ldd	r11, Z+1	; 0x01
 760:	36 fe       	sbrs	r3, 6
 762:	03 c0       	rjmp	.+6      	; 0x76a <vfprintf+0x146>
 764:	69 2d       	mov	r22, r9
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	02 c0       	rjmp	.+4      	; 0x76e <vfprintf+0x14a>
 76a:	6f ef       	ldi	r22, 0xFF	; 255
 76c:	7f ef       	ldi	r23, 0xFF	; 255
 76e:	c5 01       	movw	r24, r10
 770:	0e 94 fe 04 	call	0x9fc	; 0x9fc <strnlen>
 774:	4c 01       	movw	r8, r24
 776:	82 01       	movw	r16, r4
 778:	f3 2d       	mov	r31, r3
 77a:	ff 77       	andi	r31, 0x7F	; 127
 77c:	3f 2e       	mov	r3, r31
 77e:	16 c0       	rjmp	.+44     	; 0x7ac <vfprintf+0x188>
 780:	28 01       	movw	r4, r16
 782:	22 e0       	ldi	r18, 0x02	; 2
 784:	42 0e       	add	r4, r18
 786:	51 1c       	adc	r5, r1
 788:	f8 01       	movw	r30, r16
 78a:	a0 80       	ld	r10, Z
 78c:	b1 80       	ldd	r11, Z+1	; 0x01
 78e:	36 fe       	sbrs	r3, 6
 790:	03 c0       	rjmp	.+6      	; 0x798 <vfprintf+0x174>
 792:	69 2d       	mov	r22, r9
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	02 c0       	rjmp	.+4      	; 0x79c <vfprintf+0x178>
 798:	6f ef       	ldi	r22, 0xFF	; 255
 79a:	7f ef       	ldi	r23, 0xFF	; 255
 79c:	c5 01       	movw	r24, r10
 79e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <strnlen_P>
 7a2:	4c 01       	movw	r8, r24
 7a4:	f3 2d       	mov	r31, r3
 7a6:	f0 68       	ori	r31, 0x80	; 128
 7a8:	3f 2e       	mov	r3, r31
 7aa:	82 01       	movw	r16, r4
 7ac:	33 fc       	sbrc	r3, 3
 7ae:	1b c0       	rjmp	.+54     	; 0x7e6 <vfprintf+0x1c2>
 7b0:	82 2d       	mov	r24, r2
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	88 16       	cp	r8, r24
 7b6:	99 06       	cpc	r9, r25
 7b8:	b0 f4       	brcc	.+44     	; 0x7e6 <vfprintf+0x1c2>
 7ba:	b6 01       	movw	r22, r12
 7bc:	80 e2       	ldi	r24, 0x20	; 32
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	0e 94 09 05 	call	0xa12	; 0xa12 <fputc>
 7c4:	2a 94       	dec	r2
 7c6:	f4 cf       	rjmp	.-24     	; 0x7b0 <vfprintf+0x18c>
 7c8:	f5 01       	movw	r30, r10
 7ca:	37 fc       	sbrc	r3, 7
 7cc:	85 91       	lpm	r24, Z+
 7ce:	37 fe       	sbrs	r3, 7
 7d0:	81 91       	ld	r24, Z+
 7d2:	5f 01       	movw	r10, r30
 7d4:	b6 01       	movw	r22, r12
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 09 05 	call	0xa12	; 0xa12 <fputc>
 7dc:	21 10       	cpse	r2, r1
 7de:	2a 94       	dec	r2
 7e0:	21 e0       	ldi	r18, 0x01	; 1
 7e2:	82 1a       	sub	r8, r18
 7e4:	91 08       	sbc	r9, r1
 7e6:	81 14       	cp	r8, r1
 7e8:	91 04       	cpc	r9, r1
 7ea:	71 f7       	brne	.-36     	; 0x7c8 <vfprintf+0x1a4>
 7ec:	e8 c0       	rjmp	.+464    	; 0x9be <__stack+0xbf>
 7ee:	84 36       	cpi	r24, 0x64	; 100
 7f0:	11 f0       	breq	.+4      	; 0x7f6 <vfprintf+0x1d2>
 7f2:	89 36       	cpi	r24, 0x69	; 105
 7f4:	41 f5       	brne	.+80     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 7f6:	f8 01       	movw	r30, r16
 7f8:	37 fe       	sbrs	r3, 7
 7fa:	07 c0       	rjmp	.+14     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fc:	60 81       	ld	r22, Z
 7fe:	71 81       	ldd	r23, Z+1	; 0x01
 800:	82 81       	ldd	r24, Z+2	; 0x02
 802:	93 81       	ldd	r25, Z+3	; 0x03
 804:	0c 5f       	subi	r16, 0xFC	; 252
 806:	1f 4f       	sbci	r17, 0xFF	; 255
 808:	08 c0       	rjmp	.+16     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 80a:	60 81       	ld	r22, Z
 80c:	71 81       	ldd	r23, Z+1	; 0x01
 80e:	07 2e       	mov	r0, r23
 810:	00 0c       	add	r0, r0
 812:	88 0b       	sbc	r24, r24
 814:	99 0b       	sbc	r25, r25
 816:	0e 5f       	subi	r16, 0xFE	; 254
 818:	1f 4f       	sbci	r17, 0xFF	; 255
 81a:	f3 2d       	mov	r31, r3
 81c:	ff 76       	andi	r31, 0x6F	; 111
 81e:	3f 2e       	mov	r3, r31
 820:	97 ff       	sbrs	r25, 7
 822:	09 c0       	rjmp	.+18     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 824:	90 95       	com	r25
 826:	80 95       	com	r24
 828:	70 95       	com	r23
 82a:	61 95       	neg	r22
 82c:	7f 4f       	sbci	r23, 0xFF	; 255
 82e:	8f 4f       	sbci	r24, 0xFF	; 255
 830:	9f 4f       	sbci	r25, 0xFF	; 255
 832:	f0 68       	ori	r31, 0x80	; 128
 834:	3f 2e       	mov	r3, r31
 836:	2a e0       	ldi	r18, 0x0A	; 10
 838:	30 e0       	ldi	r19, 0x00	; 0
 83a:	a3 01       	movw	r20, r6
 83c:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ultoa_invert>
 840:	88 2e       	mov	r8, r24
 842:	86 18       	sub	r8, r6
 844:	45 c0       	rjmp	.+138    	; 0x8d0 <__DATA_REGION_LENGTH__+0xd0>
 846:	85 37       	cpi	r24, 0x75	; 117
 848:	31 f4       	brne	.+12     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 84a:	23 2d       	mov	r18, r3
 84c:	2f 7e       	andi	r18, 0xEF	; 239
 84e:	b2 2e       	mov	r11, r18
 850:	2a e0       	ldi	r18, 0x0A	; 10
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	25 c0       	rjmp	.+74     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 856:	93 2d       	mov	r25, r3
 858:	99 7f       	andi	r25, 0xF9	; 249
 85a:	b9 2e       	mov	r11, r25
 85c:	8f 36       	cpi	r24, 0x6F	; 111
 85e:	c1 f0       	breq	.+48     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 860:	18 f4       	brcc	.+6      	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 862:	88 35       	cpi	r24, 0x58	; 88
 864:	79 f0       	breq	.+30     	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 866:	b5 c0       	rjmp	.+362    	; 0x9d2 <__stack+0xd3>
 868:	80 37       	cpi	r24, 0x70	; 112
 86a:	19 f0       	breq	.+6      	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 86c:	88 37       	cpi	r24, 0x78	; 120
 86e:	21 f0       	breq	.+8      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 870:	b0 c0       	rjmp	.+352    	; 0x9d2 <__stack+0xd3>
 872:	e9 2f       	mov	r30, r25
 874:	e0 61       	ori	r30, 0x10	; 16
 876:	be 2e       	mov	r11, r30
 878:	b4 fe       	sbrs	r11, 4
 87a:	0d c0       	rjmp	.+26     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 87c:	fb 2d       	mov	r31, r11
 87e:	f4 60       	ori	r31, 0x04	; 4
 880:	bf 2e       	mov	r11, r31
 882:	09 c0       	rjmp	.+18     	; 0x896 <__DATA_REGION_LENGTH__+0x96>
 884:	34 fe       	sbrs	r3, 4
 886:	0a c0       	rjmp	.+20     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 888:	29 2f       	mov	r18, r25
 88a:	26 60       	ori	r18, 0x06	; 6
 88c:	b2 2e       	mov	r11, r18
 88e:	06 c0       	rjmp	.+12     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 890:	28 e0       	ldi	r18, 0x08	; 8
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 896:	20 e1       	ldi	r18, 0x10	; 16
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 89c:	20 e1       	ldi	r18, 0x10	; 16
 89e:	32 e0       	ldi	r19, 0x02	; 2
 8a0:	f8 01       	movw	r30, r16
 8a2:	b7 fe       	sbrs	r11, 7
 8a4:	07 c0       	rjmp	.+14     	; 0x8b4 <__DATA_REGION_LENGTH__+0xb4>
 8a6:	60 81       	ld	r22, Z
 8a8:	71 81       	ldd	r23, Z+1	; 0x01
 8aa:	82 81       	ldd	r24, Z+2	; 0x02
 8ac:	93 81       	ldd	r25, Z+3	; 0x03
 8ae:	0c 5f       	subi	r16, 0xFC	; 252
 8b0:	1f 4f       	sbci	r17, 0xFF	; 255
 8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8b4:	60 81       	ld	r22, Z
 8b6:	71 81       	ldd	r23, Z+1	; 0x01
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	0e 5f       	subi	r16, 0xFE	; 254
 8be:	1f 4f       	sbci	r17, 0xFF	; 255
 8c0:	a3 01       	movw	r20, r6
 8c2:	0e 94 45 05 	call	0xa8a	; 0xa8a <__ultoa_invert>
 8c6:	88 2e       	mov	r8, r24
 8c8:	86 18       	sub	r8, r6
 8ca:	fb 2d       	mov	r31, r11
 8cc:	ff 77       	andi	r31, 0x7F	; 127
 8ce:	3f 2e       	mov	r3, r31
 8d0:	36 fe       	sbrs	r3, 6
 8d2:	0d c0       	rjmp	.+26     	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8d4:	23 2d       	mov	r18, r3
 8d6:	2e 7f       	andi	r18, 0xFE	; 254
 8d8:	a2 2e       	mov	r10, r18
 8da:	89 14       	cp	r8, r9
 8dc:	58 f4       	brcc	.+22     	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8de:	34 fe       	sbrs	r3, 4
 8e0:	0b c0       	rjmp	.+22     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8e2:	32 fc       	sbrc	r3, 2
 8e4:	09 c0       	rjmp	.+18     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8e6:	83 2d       	mov	r24, r3
 8e8:	8e 7e       	andi	r24, 0xEE	; 238
 8ea:	a8 2e       	mov	r10, r24
 8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <__DATA_REGION_LENGTH__+0xf8>
 8ee:	b8 2c       	mov	r11, r8
 8f0:	a3 2c       	mov	r10, r3
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8f4:	b8 2c       	mov	r11, r8
 8f6:	01 c0       	rjmp	.+2      	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8f8:	b9 2c       	mov	r11, r9
 8fa:	a4 fe       	sbrs	r10, 4
 8fc:	0f c0       	rjmp	.+30     	; 0x91c <__stack+0x1d>
 8fe:	fe 01       	movw	r30, r28
 900:	e8 0d       	add	r30, r8
 902:	f1 1d       	adc	r31, r1
 904:	80 81       	ld	r24, Z
 906:	80 33       	cpi	r24, 0x30	; 48
 908:	21 f4       	brne	.+8      	; 0x912 <__stack+0x13>
 90a:	9a 2d       	mov	r25, r10
 90c:	99 7e       	andi	r25, 0xE9	; 233
 90e:	a9 2e       	mov	r10, r25
 910:	09 c0       	rjmp	.+18     	; 0x924 <__stack+0x25>
 912:	a2 fe       	sbrs	r10, 2
 914:	06 c0       	rjmp	.+12     	; 0x922 <__stack+0x23>
 916:	b3 94       	inc	r11
 918:	b3 94       	inc	r11
 91a:	04 c0       	rjmp	.+8      	; 0x924 <__stack+0x25>
 91c:	8a 2d       	mov	r24, r10
 91e:	86 78       	andi	r24, 0x86	; 134
 920:	09 f0       	breq	.+2      	; 0x924 <__stack+0x25>
 922:	b3 94       	inc	r11
 924:	a3 fc       	sbrc	r10, 3
 926:	11 c0       	rjmp	.+34     	; 0x94a <__stack+0x4b>
 928:	a0 fe       	sbrs	r10, 0
 92a:	06 c0       	rjmp	.+12     	; 0x938 <__stack+0x39>
 92c:	b2 14       	cp	r11, r2
 92e:	88 f4       	brcc	.+34     	; 0x952 <__stack+0x53>
 930:	28 0c       	add	r2, r8
 932:	92 2c       	mov	r9, r2
 934:	9b 18       	sub	r9, r11
 936:	0e c0       	rjmp	.+28     	; 0x954 <__stack+0x55>
 938:	b2 14       	cp	r11, r2
 93a:	60 f4       	brcc	.+24     	; 0x954 <__stack+0x55>
 93c:	b6 01       	movw	r22, r12
 93e:	80 e2       	ldi	r24, 0x20	; 32
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	0e 94 09 05 	call	0xa12	; 0xa12 <fputc>
 946:	b3 94       	inc	r11
 948:	f7 cf       	rjmp	.-18     	; 0x938 <__stack+0x39>
 94a:	b2 14       	cp	r11, r2
 94c:	18 f4       	brcc	.+6      	; 0x954 <__stack+0x55>
 94e:	2b 18       	sub	r2, r11
 950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0x57>
 952:	98 2c       	mov	r9, r8
 954:	21 2c       	mov	r2, r1
 956:	a4 fe       	sbrs	r10, 4
 958:	10 c0       	rjmp	.+32     	; 0x97a <__stack+0x7b>
 95a:	b6 01       	movw	r22, r12
 95c:	80 e3       	ldi	r24, 0x30	; 48
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 09 05 	call	0xa12	; 0xa12 <fputc>
 964:	a2 fe       	sbrs	r10, 2
 966:	17 c0       	rjmp	.+46     	; 0x996 <__stack+0x97>
 968:	a1 fc       	sbrc	r10, 1
 96a:	03 c0       	rjmp	.+6      	; 0x972 <__stack+0x73>
 96c:	88 e7       	ldi	r24, 0x78	; 120
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
 972:	88 e5       	ldi	r24, 0x58	; 88
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	b6 01       	movw	r22, r12
 978:	0c c0       	rjmp	.+24     	; 0x992 <__stack+0x93>
 97a:	8a 2d       	mov	r24, r10
 97c:	86 78       	andi	r24, 0x86	; 134
 97e:	59 f0       	breq	.+22     	; 0x996 <__stack+0x97>
 980:	a1 fe       	sbrs	r10, 1
 982:	02 c0       	rjmp	.+4      	; 0x988 <__stack+0x89>
 984:	8b e2       	ldi	r24, 0x2B	; 43
 986:	01 c0       	rjmp	.+2      	; 0x98a <__stack+0x8b>
 988:	80 e2       	ldi	r24, 0x20	; 32
 98a:	a7 fc       	sbrc	r10, 7
 98c:	8d e2       	ldi	r24, 0x2D	; 45
 98e:	b6 01       	movw	r22, r12
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e 94 09 05 	call	0xa12	; 0xa12 <fputc>
 996:	89 14       	cp	r8, r9
 998:	38 f4       	brcc	.+14     	; 0x9a8 <__stack+0xa9>
 99a:	b6 01       	movw	r22, r12
 99c:	80 e3       	ldi	r24, 0x30	; 48
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	0e 94 09 05 	call	0xa12	; 0xa12 <fputc>
 9a4:	9a 94       	dec	r9
 9a6:	f7 cf       	rjmp	.-18     	; 0x996 <__stack+0x97>
 9a8:	8a 94       	dec	r8
 9aa:	f3 01       	movw	r30, r6
 9ac:	e8 0d       	add	r30, r8
 9ae:	f1 1d       	adc	r31, r1
 9b0:	80 81       	ld	r24, Z
 9b2:	b6 01       	movw	r22, r12
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	0e 94 09 05 	call	0xa12	; 0xa12 <fputc>
 9ba:	81 10       	cpse	r8, r1
 9bc:	f5 cf       	rjmp	.-22     	; 0x9a8 <__stack+0xa9>
 9be:	22 20       	and	r2, r2
 9c0:	09 f4       	brne	.+2      	; 0x9c4 <__stack+0xc5>
 9c2:	42 ce       	rjmp	.-892    	; 0x648 <vfprintf+0x24>
 9c4:	b6 01       	movw	r22, r12
 9c6:	80 e2       	ldi	r24, 0x20	; 32
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 09 05 	call	0xa12	; 0xa12 <fputc>
 9ce:	2a 94       	dec	r2
 9d0:	f6 cf       	rjmp	.-20     	; 0x9be <__stack+0xbf>
 9d2:	f6 01       	movw	r30, r12
 9d4:	86 81       	ldd	r24, Z+6	; 0x06
 9d6:	97 81       	ldd	r25, Z+7	; 0x07
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
 9da:	8f ef       	ldi	r24, 0xFF	; 255
 9dc:	9f ef       	ldi	r25, 0xFF	; 255
 9de:	2b 96       	adiw	r28, 0x0b	; 11
 9e0:	e2 e1       	ldi	r30, 0x12	; 18
 9e2:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__epilogue_restores__>

000009e6 <strnlen_P>:
 9e6:	fc 01       	movw	r30, r24
 9e8:	05 90       	lpm	r0, Z+
 9ea:	61 50       	subi	r22, 0x01	; 1
 9ec:	70 40       	sbci	r23, 0x00	; 0
 9ee:	01 10       	cpse	r0, r1
 9f0:	d8 f7       	brcc	.-10     	; 0x9e8 <strnlen_P+0x2>
 9f2:	80 95       	com	r24
 9f4:	90 95       	com	r25
 9f6:	8e 0f       	add	r24, r30
 9f8:	9f 1f       	adc	r25, r31
 9fa:	08 95       	ret

000009fc <strnlen>:
 9fc:	fc 01       	movw	r30, r24
 9fe:	61 50       	subi	r22, 0x01	; 1
 a00:	70 40       	sbci	r23, 0x00	; 0
 a02:	01 90       	ld	r0, Z+
 a04:	01 10       	cpse	r0, r1
 a06:	d8 f7       	brcc	.-10     	; 0x9fe <strnlen+0x2>
 a08:	80 95       	com	r24
 a0a:	90 95       	com	r25
 a0c:	8e 0f       	add	r24, r30
 a0e:	9f 1f       	adc	r25, r31
 a10:	08 95       	ret

00000a12 <fputc>:
 a12:	0f 93       	push	r16
 a14:	1f 93       	push	r17
 a16:	cf 93       	push	r28
 a18:	df 93       	push	r29
 a1a:	fb 01       	movw	r30, r22
 a1c:	23 81       	ldd	r18, Z+3	; 0x03
 a1e:	21 fd       	sbrc	r18, 1
 a20:	03 c0       	rjmp	.+6      	; 0xa28 <fputc+0x16>
 a22:	8f ef       	ldi	r24, 0xFF	; 255
 a24:	9f ef       	ldi	r25, 0xFF	; 255
 a26:	2c c0       	rjmp	.+88     	; 0xa80 <fputc+0x6e>
 a28:	22 ff       	sbrs	r18, 2
 a2a:	16 c0       	rjmp	.+44     	; 0xa58 <fputc+0x46>
 a2c:	46 81       	ldd	r20, Z+6	; 0x06
 a2e:	57 81       	ldd	r21, Z+7	; 0x07
 a30:	24 81       	ldd	r18, Z+4	; 0x04
 a32:	35 81       	ldd	r19, Z+5	; 0x05
 a34:	42 17       	cp	r20, r18
 a36:	53 07       	cpc	r21, r19
 a38:	44 f4       	brge	.+16     	; 0xa4a <fputc+0x38>
 a3a:	a0 81       	ld	r26, Z
 a3c:	b1 81       	ldd	r27, Z+1	; 0x01
 a3e:	9d 01       	movw	r18, r26
 a40:	2f 5f       	subi	r18, 0xFF	; 255
 a42:	3f 4f       	sbci	r19, 0xFF	; 255
 a44:	31 83       	std	Z+1, r19	; 0x01
 a46:	20 83       	st	Z, r18
 a48:	8c 93       	st	X, r24
 a4a:	26 81       	ldd	r18, Z+6	; 0x06
 a4c:	37 81       	ldd	r19, Z+7	; 0x07
 a4e:	2f 5f       	subi	r18, 0xFF	; 255
 a50:	3f 4f       	sbci	r19, 0xFF	; 255
 a52:	37 83       	std	Z+7, r19	; 0x07
 a54:	26 83       	std	Z+6, r18	; 0x06
 a56:	14 c0       	rjmp	.+40     	; 0xa80 <fputc+0x6e>
 a58:	8b 01       	movw	r16, r22
 a5a:	ec 01       	movw	r28, r24
 a5c:	fb 01       	movw	r30, r22
 a5e:	00 84       	ldd	r0, Z+8	; 0x08
 a60:	f1 85       	ldd	r31, Z+9	; 0x09
 a62:	e0 2d       	mov	r30, r0
 a64:	09 95       	icall
 a66:	89 2b       	or	r24, r25
 a68:	e1 f6       	brne	.-72     	; 0xa22 <fputc+0x10>
 a6a:	d8 01       	movw	r26, r16
 a6c:	16 96       	adiw	r26, 0x06	; 6
 a6e:	8d 91       	ld	r24, X+
 a70:	9c 91       	ld	r25, X
 a72:	17 97       	sbiw	r26, 0x07	; 7
 a74:	01 96       	adiw	r24, 0x01	; 1
 a76:	17 96       	adiw	r26, 0x07	; 7
 a78:	9c 93       	st	X, r25
 a7a:	8e 93       	st	-X, r24
 a7c:	16 97       	sbiw	r26, 0x06	; 6
 a7e:	ce 01       	movw	r24, r28
 a80:	df 91       	pop	r29
 a82:	cf 91       	pop	r28
 a84:	1f 91       	pop	r17
 a86:	0f 91       	pop	r16
 a88:	08 95       	ret

00000a8a <__ultoa_invert>:
 a8a:	fa 01       	movw	r30, r20
 a8c:	aa 27       	eor	r26, r26
 a8e:	28 30       	cpi	r18, 0x08	; 8
 a90:	51 f1       	breq	.+84     	; 0xae6 <__ultoa_invert+0x5c>
 a92:	20 31       	cpi	r18, 0x10	; 16
 a94:	81 f1       	breq	.+96     	; 0xaf6 <__ultoa_invert+0x6c>
 a96:	e8 94       	clt
 a98:	6f 93       	push	r22
 a9a:	6e 7f       	andi	r22, 0xFE	; 254
 a9c:	6e 5f       	subi	r22, 0xFE	; 254
 a9e:	7f 4f       	sbci	r23, 0xFF	; 255
 aa0:	8f 4f       	sbci	r24, 0xFF	; 255
 aa2:	9f 4f       	sbci	r25, 0xFF	; 255
 aa4:	af 4f       	sbci	r26, 0xFF	; 255
 aa6:	b1 e0       	ldi	r27, 0x01	; 1
 aa8:	3e d0       	rcall	.+124    	; 0xb26 <__ultoa_invert+0x9c>
 aaa:	b4 e0       	ldi	r27, 0x04	; 4
 aac:	3c d0       	rcall	.+120    	; 0xb26 <__ultoa_invert+0x9c>
 aae:	67 0f       	add	r22, r23
 ab0:	78 1f       	adc	r23, r24
 ab2:	89 1f       	adc	r24, r25
 ab4:	9a 1f       	adc	r25, r26
 ab6:	a1 1d       	adc	r26, r1
 ab8:	68 0f       	add	r22, r24
 aba:	79 1f       	adc	r23, r25
 abc:	8a 1f       	adc	r24, r26
 abe:	91 1d       	adc	r25, r1
 ac0:	a1 1d       	adc	r26, r1
 ac2:	6a 0f       	add	r22, r26
 ac4:	71 1d       	adc	r23, r1
 ac6:	81 1d       	adc	r24, r1
 ac8:	91 1d       	adc	r25, r1
 aca:	a1 1d       	adc	r26, r1
 acc:	20 d0       	rcall	.+64     	; 0xb0e <__ultoa_invert+0x84>
 ace:	09 f4       	brne	.+2      	; 0xad2 <__ultoa_invert+0x48>
 ad0:	68 94       	set
 ad2:	3f 91       	pop	r19
 ad4:	2a e0       	ldi	r18, 0x0A	; 10
 ad6:	26 9f       	mul	r18, r22
 ad8:	11 24       	eor	r1, r1
 ada:	30 19       	sub	r19, r0
 adc:	30 5d       	subi	r19, 0xD0	; 208
 ade:	31 93       	st	Z+, r19
 ae0:	de f6       	brtc	.-74     	; 0xa98 <__ultoa_invert+0xe>
 ae2:	cf 01       	movw	r24, r30
 ae4:	08 95       	ret
 ae6:	46 2f       	mov	r20, r22
 ae8:	47 70       	andi	r20, 0x07	; 7
 aea:	40 5d       	subi	r20, 0xD0	; 208
 aec:	41 93       	st	Z+, r20
 aee:	b3 e0       	ldi	r27, 0x03	; 3
 af0:	0f d0       	rcall	.+30     	; 0xb10 <__ultoa_invert+0x86>
 af2:	c9 f7       	brne	.-14     	; 0xae6 <__ultoa_invert+0x5c>
 af4:	f6 cf       	rjmp	.-20     	; 0xae2 <__ultoa_invert+0x58>
 af6:	46 2f       	mov	r20, r22
 af8:	4f 70       	andi	r20, 0x0F	; 15
 afa:	40 5d       	subi	r20, 0xD0	; 208
 afc:	4a 33       	cpi	r20, 0x3A	; 58
 afe:	18 f0       	brcs	.+6      	; 0xb06 <__ultoa_invert+0x7c>
 b00:	49 5d       	subi	r20, 0xD9	; 217
 b02:	31 fd       	sbrc	r19, 1
 b04:	40 52       	subi	r20, 0x20	; 32
 b06:	41 93       	st	Z+, r20
 b08:	02 d0       	rcall	.+4      	; 0xb0e <__ultoa_invert+0x84>
 b0a:	a9 f7       	brne	.-22     	; 0xaf6 <__ultoa_invert+0x6c>
 b0c:	ea cf       	rjmp	.-44     	; 0xae2 <__ultoa_invert+0x58>
 b0e:	b4 e0       	ldi	r27, 0x04	; 4
 b10:	a6 95       	lsr	r26
 b12:	97 95       	ror	r25
 b14:	87 95       	ror	r24
 b16:	77 95       	ror	r23
 b18:	67 95       	ror	r22
 b1a:	ba 95       	dec	r27
 b1c:	c9 f7       	brne	.-14     	; 0xb10 <__ultoa_invert+0x86>
 b1e:	00 97       	sbiw	r24, 0x00	; 0
 b20:	61 05       	cpc	r22, r1
 b22:	71 05       	cpc	r23, r1
 b24:	08 95       	ret
 b26:	9b 01       	movw	r18, r22
 b28:	ac 01       	movw	r20, r24
 b2a:	0a 2e       	mov	r0, r26
 b2c:	06 94       	lsr	r0
 b2e:	57 95       	ror	r21
 b30:	47 95       	ror	r20
 b32:	37 95       	ror	r19
 b34:	27 95       	ror	r18
 b36:	ba 95       	dec	r27
 b38:	c9 f7       	brne	.-14     	; 0xb2c <__ultoa_invert+0xa2>
 b3a:	62 0f       	add	r22, r18
 b3c:	73 1f       	adc	r23, r19
 b3e:	84 1f       	adc	r24, r20
 b40:	95 1f       	adc	r25, r21
 b42:	a0 1d       	adc	r26, r0
 b44:	08 95       	ret

00000b46 <__prologue_saves__>:
 b46:	2f 92       	push	r2
 b48:	3f 92       	push	r3
 b4a:	4f 92       	push	r4
 b4c:	5f 92       	push	r5
 b4e:	6f 92       	push	r6
 b50:	7f 92       	push	r7
 b52:	8f 92       	push	r8
 b54:	9f 92       	push	r9
 b56:	af 92       	push	r10
 b58:	bf 92       	push	r11
 b5a:	cf 92       	push	r12
 b5c:	df 92       	push	r13
 b5e:	ef 92       	push	r14
 b60:	ff 92       	push	r15
 b62:	0f 93       	push	r16
 b64:	1f 93       	push	r17
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	cd b7       	in	r28, 0x3d	; 61
 b6c:	de b7       	in	r29, 0x3e	; 62
 b6e:	ca 1b       	sub	r28, r26
 b70:	db 0b       	sbc	r29, r27
 b72:	0f b6       	in	r0, 0x3f	; 63
 b74:	f8 94       	cli
 b76:	de bf       	out	0x3e, r29	; 62
 b78:	0f be       	out	0x3f, r0	; 63
 b7a:	cd bf       	out	0x3d, r28	; 61
 b7c:	09 94       	ijmp

00000b7e <__epilogue_restores__>:
 b7e:	2a 88       	ldd	r2, Y+18	; 0x12
 b80:	39 88       	ldd	r3, Y+17	; 0x11
 b82:	48 88       	ldd	r4, Y+16	; 0x10
 b84:	5f 84       	ldd	r5, Y+15	; 0x0f
 b86:	6e 84       	ldd	r6, Y+14	; 0x0e
 b88:	7d 84       	ldd	r7, Y+13	; 0x0d
 b8a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b8c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b8e:	aa 84       	ldd	r10, Y+10	; 0x0a
 b90:	b9 84       	ldd	r11, Y+9	; 0x09
 b92:	c8 84       	ldd	r12, Y+8	; 0x08
 b94:	df 80       	ldd	r13, Y+7	; 0x07
 b96:	ee 80       	ldd	r14, Y+6	; 0x06
 b98:	fd 80       	ldd	r15, Y+5	; 0x05
 b9a:	0c 81       	ldd	r16, Y+4	; 0x04
 b9c:	1b 81       	ldd	r17, Y+3	; 0x03
 b9e:	aa 81       	ldd	r26, Y+2	; 0x02
 ba0:	b9 81       	ldd	r27, Y+1	; 0x01
 ba2:	ce 0f       	add	r28, r30
 ba4:	d1 1d       	adc	r29, r1
 ba6:	0f b6       	in	r0, 0x3f	; 63
 ba8:	f8 94       	cli
 baa:	de bf       	out	0x3e, r29	; 62
 bac:	0f be       	out	0x3f, r0	; 63
 bae:	cd bf       	out	0x3d, r28	; 61
 bb0:	ed 01       	movw	r28, r26
 bb2:	08 95       	ret

00000bb4 <_exit>:
 bb4:	f8 94       	cli

00000bb6 <__stop_program>:
 bb6:	ff cf       	rjmp	.-2      	; 0xbb6 <__stop_program>
